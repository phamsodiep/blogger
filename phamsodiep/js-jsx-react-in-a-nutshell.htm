<div id="entry_article">
<details class="hidden">
    <summary>
        <img
          border="0"
          data-original-width="1"
          data-original-height="1"
          width="1"
          height="1"
          src="https://2.bp.blogspot.com/-2of9KoZp8vc/Xp_w58hoeMI/AAAAAAAAAOE/-4LKN93rwEsDzD9rlvXjhANXUQwhHrqHQCLcBGAsYHQ/s1600/null.png"
        />
        <div id="entry_brief"><em><i>
            React is a JavaScript library for building Web user interfaces. It
            is maintained by Facebook. It supports renderring data to DOM
            programmatically. Template is composed by JSX, a Javascript
            extension supports embedded HTML. This blog entry shares some
            basic concepts and how to leverage frame work to build Line 98 line
            game step by step.<br />
            <br />
            <b>Audience:</b> software engineer with Javascript, CSS3 and UML
            knowledge – <b>Topic:</b> React programming
        </i></em></div>
    </summary>
    <p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>
</details>


<div class="naturalsciencefont0">
    <div ID=" I. Create a project" class="para_sep1">
        <div>
            <b>I. Create a project</b>
        </div>
        <div ID=" I.1. Prerequisites">
            <div><b>1. Prerequisites</b></div>
            <div class="lindent0a">
                NodeJS
            </div>
        </div>
        <div ID=" I.2. Create a project" class="para_sep1">
            <div><b>2. Create a project</b></div>
            <div class="lindent00">
                <div>Launch below command:</div>
                <div class="lindent00">
                    npx create-react-app <i>line_98_game</i>
                </div>
                <div class="lindent0a">
                    <div>Where:</div>
                    <div class="lindent0b">
                        <i>line_98_game</i>: project name, it is also the
                        name of project folder
                    </div>
                </div>
            </div>
        </div>
        <div ID=" I.3. Run project" class="para_sep1">
            <div><b>3. Run project</b></div>
            <div class="lindent00">
                <div>
                    Switch current folder to project folder and launch below
                    command:
                </div>
                <div class="lindent00">
                    npx start
                </div>
                <div>
                    Open web browser to url <i>http://localhost:3000</i>
                    for test.
                </div>
                <div class="lindent0a">
                    <div>Notes:</div>
                    <div class="lindent0b">
                        <div>
                            To export project into static HTML files so that it
                            could be tested without NodeJS server. Launch below
                            command:
                        </div>
                        <div class="lindent00">
                            npx run build
                        </div>
                    </div>
                    <div class="lindent0b">
                        Exported static HTML files are located at folder:
                        <i>build</i>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div ID=" II. Line 98 implementation introduction" class="para_sep1">
        <div>
            <b>II. Line 98 implementation introduction</b>
        </div>
        <div ID=" II.1. Introduction">
            <div><b>1. Introduction</b></div>
            <div class="lindent00">
                We will implement Line 98 game in React with design is located 
                at <i>https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html</i>
            </div>
        </div>
        <div ID=" II.2. Feature evolution" class="para_sep1">
            <div><b>2. Feature evolution</b></div>
            <div class="lindent00">
                We are implementing system with learning React intent. We start
                with no knowledge about React. To make thing easier for learning
                purpose, we will degrade system features and break down tasks,
                then implement them step by step with feature evolution.
            </div>
            <div class="lindent00">
                <div>System will evolute via version history as below:</div>
                <div class="lindent0a">
                    <i>0.1:</i>
                    On this version, user just sees a <i>Game Board</i>. No
                    interaction could be conducted.
                </div>
                <div class="lindent0a">
                    <div>
                        <i>0.2:</i>
                        On this version, use case <i>Reset Game</i>
                        is available with partial function.
                    </div>
                    <div class="lindent0b">
                        <i>0.2.1:</i>
                        Clicking reset <i>Button</i> triggers an alert message
                        <i>'Game reseting...'</i> showed.
                    </div>
                    <div class="lindent0b">
                        <i>0.2.2:</i>
                        Clicking reset <i>Button</i> results in system
                        initializes an <i>Game Board</i> with full of
                        <i>Ball</i>s rendered in cyan colour.
                    </div>
                </div>
                <div class="lindent0a">
                    <div>
                        <i>0.3:</i>
                        On this version, use case <i>Move Ball</i> is
                        available with partial function.
                    </div>
                    <div class="lindent0b">
                        <i>0.3.1:</i> <i>Player</i> could click a <i>Ball</i>
                        for selecting, <i>Ball</i> is rendered in <i>Focused</i>
                        animation to displaying this selecting.
                    </div>
                </div>
                <div class="lindent0a">
                    <div>
                        <i>0.4:</i>
                        On this version, source code are modularized,
                        Code Splitting is also applied for this.
                    </div>
                    <div class="lindent0b">
                        <i>0.4.1:</i>
                    </div>
                </div>
            </div>
            <div class="lindent00">
                <div><i>Note:</i></div>
                <div class="lindent00">
                    Game algorithm is also ready in github for source
                    code copy/paste so that we could pay attention to React
                    learning. <br />
                    Link:
                    <a
                      target="_blank"
                      rel="noopener noreferrer"
                      href="https://github.com/phamsodiep/react_line_98_game"
                    >
                      https://github.com/phamsodiep/react_line_98_game
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div ID=" III. Learning React by Line 98 implementation" class="para_sep1">
        <div>
            <b>III. Learning React by Line 98 implementation</b>
        </div>
        <div ID=" III.1. Basic concepts">
            <div><b>1. Basic concepts</b></div>
            <div ID=" III.1.1. JSX">
                <div><i>1.1. JSX</i></div>
                <div ID=" III.1.1.1 Concept" class="lindent00">
                    <div><i>1.1.1 Concept</i></div>
                    <div>
                        <div>JSX example:</div>
                        <div class="lindent00">





<textarea id="jsxsrc:1.1.1:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
const element = <h1>Line 98</h1>;</textarea>





                        </div>
                    </div>
                    <div>
                        React is developed in Javascript without real HTML tags.
                        JSX is an extension of Javascript to depicts HTML
                        template that React could understand. JSX is then
                        compiled into pure Javascript by NodeJS plug-in. JSX
                        needs compilation because it is neither Javascript
                        string or HTML.
                    </div>
                </div>
                <div ID=" III.1.1.2 JSX Expression" class="lindent00">
                    <div class="para_sep1"><i>1.1.2 JSX Expression</i></div>
                    <div>
                        <div>
                            JSX interprets Javascript expression (variables,
                            constants, functions...) to compose it into HTML
                            representation via JSX expression. For example:
                        </div>
                        <div class="lindent00">
                            <div>





<textarea id="jsxsrc:1.1.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
const name = 'Josh Perez';
const element = <h1>Hello, {name}</h1>;</textarea>





                            </div>
                            <div class="lindent0a">
                                <div>
                                    <i>{name}</i> is a JSX expression. The HTML
                                    representation of <i>{name}</i> will be
                                    substituted by value of Javascript variable
                                    named <i>name</i> which is <i>Josh Perez
                                    </i>. This is equivalent to below HTML
                                    rendering:
                                </div>
                                <div class="lindent00">





<textarea id="jsxsrc:1.1.2:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<h1>Hello, Josh Perez</h1></textarea>





                                </div>
                            </div>
                        </div>
                    </div>
                    <div>
                        <div>
                            Notes:
                        </div>
                        <div class="lindent0a">
                            <div>
                                Expression could be placed at attribute also:
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:1.1.2:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
let url="http:/☯/localhost/nemo.jpg";
const imgEle = <im☯g src={url} />;</textarea>





                            </div>
                        </div>
                        <div class="lindent0a">
                            <div>
                                Expression value could also be a JSX
                                (nested JSX):
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:1.1.2:4" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
let url="http:/☯/localhost/nemo.jpg";
const imgEle = <im☯g src={url} />;
const divEle = <div>{imgEle}<div>;</textarea>





                            </div>
                        </div>
                    </div>
                </div>
                <div ID=" III.1.1.3 React elements" class="lindent00">
                    <div class="para_sep1"><i>1.1.3 React elements</i></div>
                    <div>
                        <div>
                            Const or variable created by JSX is naturaly
                            Javascript Object type. For example of element
                            const:
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:1.1.3:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
// Note: this structure is simplified
const element = {
  type: 'h1',
  props: {
    children: 'Line 98'
  }
}</textarea>





                        </div>
                        <div>
                            We call this as React element. React element is
                            just data of Object type not real DOM. We need to
                            invoke React render function to render this
                            element into HTML5 real DOM.
                        </div>
                    </div>
                </div>
            </div>
            <div ID=" III.1.2. React Component" class="para_sep1">
                <div><i>1.2. React Component</i></div>
                <div ID=" III.1.2.1. Purpose" class="lindent00">
                    <div>
                        <i>1.2.1. Purpose</i>
                    </div>
                    <div>
                        <div>
                            React Component is an encapsulation object to render
                            a chunks of HTML. For example GameBoard React
                            Component is designed to render HTML tags present
                            GameBoard include:
                        </div>
                        <div class="lindent0a">
                            A list of div tag presents cells of GameBoard which
                            user could click to (div tags listen to user's
                            onClick event).
                        </div>
                        <div class="lindent0a">
                            An background image presents cells boundary lines
                            (draws grid).
                        </div>
                    </div>
                </div>
                <div ID=" III.1.2.2. Definition" class="lindent00">
                    <div class="para_sep1">
                        <i>1.2.2. Definition</i>
                    </div>
                    <div>
                        <div>
                            React Component is an ES6 (new
                            version of Javascript that is supported by many
                            modern browsers) class that:
                        </div>
                        <div class="lindent0a">
                            Extends from React.Component class.
                        </div>
                        <div class="lindent0a">
                            Has render method return a JSX.
                        </div>
                        <div class="lindent0a">
                            Has properties and internal state (these concepts
                            will be explained in the next sections).
                        </div>
                        <div>
                            For example:
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:1.2.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
class GameTitle extends React.Component {
  render() {
    return <h1>Line 98 </h1>;
  }
}</textarea>





                        </div>
                    </div>
                </div>
                <div ID=" III.1.2.3. Rendering" class="lindent00">
                    <div class="para_sep1">
                        <i>1.2.3. Rendering</i>
                    </div>
                    <div>
                        <div>
                            To render JSX:
                        </div>
                        <div class="lindent0b">
                            <div>
                                Create an element in HTML file and assign an id
                                to it. For example:
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:1.2.3:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<div id="line_98_title"></div></textarea>





</div>
                        </div>
                        <div class="lindent0b">
                            <div>
                                Invoke function ReactDOM.render to fill the
                                element content (.innerHTML) with React element
                                content as below:
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:1.2.3:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
const element = <h1>Line 98</h1>;
ReactDOM.render(
  element,
  document.getElementById('line_98_title')
);</textarea>





                            </div>
                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            To render React Component:
                        </div>
                        <div class="lindent0b">
                            It is similar to rendering JSX because React
                            Component needs to be reprented as a JSX before
                            rendering.
                        </div>
                        <div class="lindent0b">
                            <div>JSX of GameTitle component is as below:</div>
                            <div class="lindent00">





<textarea id="jsxsrc:1.2.3:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
let gameTitleElem = <GameTitle />;
</textarea>





                            </div>
                        </div>
                        <div class="lindent0b">
                            <div>Then, we could render it:</div>
                            <div class="lindent00">





<textarea id="jsxsrc:1.2.3:4" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
ReactDOM.render(
  gameTitleElem,
  document.getElementById('line_98_title')
);</textarea>





                            </div>
                        </div>
                    </div>
                </div>
                <div ID=" III.1.2.4. Properties" class="lindent00">
                    <div class="para_sep1">
                        <i>1.2.4. Properties</i>
                    </div>
                    <div>
                        <div>
                            JSX expression could be placed at attribute also,
                            for JSX of React Component, these attributes
                            are accessed from Component (ES6 class) as
                            properties named as <i>props</i>. For example:
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:1.2.3:5" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
let titleStr = "Line 98 Game";
let gameTitleElem = <GameTitle title={titleStr}/>;

ReactDOM.render(
  gameTitleElem,
   document.getElementById('line_98_title')
);</textarea>





                        </div>
                        <div class="lindent0a">
                            <div>
                                Where:
                            </div>
                            <div class="lindent0b">
                                <div>
                                    <i>title</i>={title}: <i>title</i> is an
                                    attribute of React Component GameTitle. It
                                    could be accessed in GameTitle class as
                                    <i>this.props.title</i>:
                                </div>
                                <div class="lindent00">
                                    <div class="lindent00">





<textarea id="jsxsrc:1.2.3:6" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
class GameTitle extends React.Component {
  render() {
    return <h1> this.props.title </h1>;
  }
}</textarea>





                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="lindent0a">
                            <div>
                                Note:
                            </div>
                            <div class="lindent0b">
                                Property is readonly that means that we could
                                not assign new value to <i>this.props.title</i>
                                in GameTitle class implementation.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div ID=" III.1.3. Exercises" class="para_sep1">
                <div><i>1.3. Exercises</i></div>
                <div ID=" III.1.3.1. Setup environments" class="lindent00">
                    <div>
                        <i>1.3.1. Setup environments</i>
                        <input
                          id="setup_env_131$"
                          class="view_switch"
                          type="button"
                          value="content is hidden"
                          onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                          title="click to show/hide Setup environments content"
                        />





<div class="setup_env_131$content_is_displayed" style="display: none;">





                        <div>
                            <div>
                                We will create a project name <i>line_98_game</i> by
                                following instructions in section <i>I. Create a
                                project</i> then implement a very simple code to
                                test. The code will render a h1 tag with
                                "Hello, world!" text in italic. Follow below
                                steps for implementation, github source code is
                                also available at
                                <a
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  href="https://github.com/phamsodiep/react_line_98_game/commit/2e2fb708b6568167e8449c1dfcc56257da6a5cdb"
                                >
                                  link.
                                </a>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Create project with below command:
                                </div>
                                <div class="lindent00">
                                    npx create-react-app <i>line_98_game</i>
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Move or delete all files of below folders:
                                </div>
                                <div class="lindent0b">
                                    public
                                </div>
                                <div class="lindent0b">
                                    src
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Create an HTML file named <i>index.html</i>
                                    in folder <i>public</i> for a div entry with
                                    an id of value "line98EntryPoint" so that
                                    ReactDOM.render could render to.
                                </div>
                                <div class="lindent00">





<textarea id="jsxsrc:1.3.1:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<!DOCTYPE html>
<html lang="en">
 <head>
    <meta charset="utf-8" />
    <title>Line 98</title>
  </head>
  <body>
    <div id="line98EntryPoint"></div>
  </body>
</html></textarea>





                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Create a Javascript file named <i>index.js</i>
                                    in folder <i>src</i> for React source code
                                    implementation.
                                </div>
                                <div class="lindent00">





<textarea id="jsxsrc:1.3.1:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';

let msgElem = <i>Hello, world!</i>;
ReactDOM.render(
  <h1>{msgElem}</h1>,
  document.getElementById('line98EntryPoint')
);</textarea>





                                </div>
                                <div>
                                    <i>Note</i>:
                                    We need to import <i>React</i> and ReactDOM for
                                    basic React libraries.
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Launch below command to start NodeJS server:
                                </div>
                                <div class="lindent00">
                                    npx start
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Open web browser to below url for test:
                                </div>
                                <div class="lindent00">
                                    http://localhost:3000/
                                </div>
                            </div>
                        </div>





</div>





                    </div>
                </div>
                <div ID=" III.1.3.2. Implement Hello component" class="lindent00">
                    <div class="para_sep1">
                        <i>1.3.2. Implement Hello component</i>
                        <input
                          id="impl_hello_comp$"
                          class="view_switch"
                          type="button"
                          value="content is hidden"
                          onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                          title="click to show/hide mplement Hello component content"
                        />





<div class="impl_hello_comp$content_is_displayed" style="display: none;">





                        <div>
                            <div class="lindent0a">
                                <div>
                                    Create class <i>Hello</i> extends
                                    <i>React.Component</i> with <i>render()</i>
                                    method in source code file <i>index.js</i>
                                    as below, then follow steps of section
                                    <i>1.3.1. Setup environments</i> for test.
                                    Github source code is also available at
                                    <a
                                      target="_blank"
                                      rel="noopener noreferrer"
                                      href="https://github.com/phamsodiep/react_line_98_game/commit/6a8ddde0a714c77fe8c5d4639aa8d3c90bd4242a"
                                    >
                                      link.
                                    </a>
                                </div>
                                <div class="lindent00">





<textarea id="jsxsrc:1.3.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';

class Hello extends React.Component {
  render() {
    let msgElem = <i>Hello, world!</i>;
    return <h1>{msgElem}</h1> ;
  }
}
ReactDOM.render(
  <Hello />,
  document.getElementById('line98EntryPoint')
);</textarea>





                                </div>
                            </div>
                        </div>





</div>





                    </div>
                </div>
            </div>
        </div>
        <div ID=" III.2. Component Lifecycle Methods" class="para_sep1">
            <div><b>2. Component Lifecycle Methods</b></div>
            <div ID=" III.2.1. Mounting and Unmounting">
                <div><i>2.1. Mounting and unmounting</i></div>
                <div class="lindent0a">
                    <i>Mounting</i> is behavior renders component to real DOM
                    for the first time.
                </div>
                <div class="lindent0a">
                    <i>Unmounting</i> is behavior remove component from real
                    DOM.
                </div>
            </div>
            <div ID=" III.2.2. Lifecycle Methods" class="para_sep1">
                <div><i>2.2. Lifecycle methods</i></div>
                <div class="lindent00">
                    <div>
                        <i>Lifecycle methods</i> are methods of component class
                        is invoked when a component mounts and unmounts.
                        They are:
                    </div>
                    <div class="lindent0a">
                        <i>componentDidMount()</i>: method is invoked after the
                        component output has been rendered to the DOM.
                    </div>
                    <div class="lindent0a">
                        <i>componentWillUnmount()</i>: method is invoked
                        immediately before a component is unmounted and
                        destroyed
                            <a
                              target="_blank"
                              rel="noopener noreferrer"
                              href="https://stackoverflow.com/questions/40760308/how-to-properly-use-componentwillunmount-in-reactjs"
                            >
                              (stack overflow).
                            </a>
                    </div>
                </div>
            </div>
            <div ID=" III.2.3. Exercises" class="para_sep1">
                <div><i>2.3. Exercises</i></div>
                <div class="lindent00">
                    <div>
                        Implement version 0.1.0
                        <input
                          id="impl_ver_010$"
                          class="view_switch"
                          type="button"
                          value="content is hidden"
                          onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                          title="click to show/hide Implement version 0.1.0 content"
                        />





<div class="impl_ver_010$content_is_displayed" style="display: none;">





                        <div>
                            <div class="lindent0a">
                                As SDD – Software design description,
                                <a
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html#fig_designed_class_diag"
                                >
                                  <b>Figure</b> 3.3.2.1:
                                  <i>System overview class diagram</i>,
                                </a>
                                <i>GameBoard</i> stereotype is <i>Boundary</i>.
                                Thus, we will implement class <i>GameBoard</i>
                                as React Component.
                            </div>
                            <div class="lindent0a">
                                As <i>II.2. Feature evolution</i> section,
                                <i>GameBoard</i> just needs to draw cells.
                                To draw cells we need a <i>Canvas</i> tag
                                which is then, rendered programmatically in
                                Javascript. It is a real DOM manipulation
                                so we need to hook to method
                                <i>componentDidMount()</i> for such real DOM
                                ready.
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Implementation steps is as below, github
                                    source code is also available at
                                    <a
                                      target="_blank"
                                      rel="noopener noreferrer"
                                      href="https://github.com/phamsodiep/react_line_98_game/commit/6925ee6cc978240b4895153e7ac9554343d954b5"
                                    >
                                      link.
                                    </a>
                                </div>
                                <div class="lindent0b">
                                    <div>
                                        Remove class <i>Hello</i> implementation
                                        and replace it with class
                                        <i>GameBoard</i> implementation as
                                        below:
                                    </div>
                                    <div class="lindent0c">
                                        Implement <i>render()</i> method
                                        to render two divs and one canvas:
                                        <div class="lindent0c">
                                            Div <i>gameBoard</i> houses
                                            canvas and future <i>Ball</i>
                                            component which is not available
                                            in this version. This div layouts
                                            its child elements in
                                            <i>relative</i> position.
                                        </div>
                                        <div class="lindent0c">
                                            Div <i>container</i> houses div
                                            <i>gameBoard</i>. We need this div
                                            to make div <i>gameBoard</i> is
                                            compatiable with default layout
                                            of webpage.
                                        </div>
                                        <div class="lindent0c">
                                            Canvas <i>gameboard_bg</i> element
                                            render GameBoard's grid. We need a
                                            canvas for rendering instead of
                                            a grid of divs for simplicity
                                            (reduce number of elements in
                                            webpage).
                                        </div>
                                    </div>
                                    <div class="lindent0c">
                                        <div>
                                            Implement method
                                            <i>componentDidMount()</i>
                                            to render grid in canvas:
                                        </div>
                                        <div class="lindent0c">
                                            We can not render canvas in
                                            <i>render()</i> method because JSX
                                            is virtual DOM, not real DOM. Within
                                            <i>render()</i> method, the canvas
                                            does not exist.
                                        </div>
                                        <div class="lindent0c">
                                            We assign canvas with id of value
                                            <i>gameboard_bg</i> so that method
                                            <i>componentDidMount()</i> could
                                            refer to.
                                        </div>
                                    </div>
                                </div>
                                <div class="lindent0b">
                                    <div>
                                        Result source code is as below:
                                    </div>
                                    <div>





<textarea id="jsxsrc:2.3.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';


class GameBoard extends React.Component {
  componentDidMount() {
    let bgImg = document.getElementById("gameboard_bg");
    if (bgImg === null) return;
    let i = 0;
    let n = 9; // dimension
    let thick = 1;
    let cellSize = 50;
    let width = n * cellSize + thick * (n + thick);

    // Context retrieving and initializing
    bgImg.width = width;
    bgImg.height = width;
    bgImg.style.position = "absolute";
    bgImg.style.left = 0;
    bgImg.style.top = 0;
    let canvasContext = bgImg.getContext("2d");
    canvasContext.translate(0, 0);
    canvasContext.lineWidth = 1;

    // Render board surface
    canvasContext.fillStyle = "#eeeeee";
    canvasContext.fillRect(
      0,
      0,
      width,
      width
    );

    // Render board cells border
    // |  |  |...
    canvasContext.fillStyle = "#000000";
    for (i = 0; i <= n; i++) {
      let x = i * (cellSize + thick);
      canvasContext.fillRect(x, 0, thick, width);
    }
    // =
    for (i = 0; i <= n; i++) {
      let y = i * (cellSize + thick);
      canvasContext.fillRect(0, y, width, thick);
    }
  }

  render() {
    // dimension * cellSize + lineWidth * (dimension + 1)
    let width = 9 * 50 + 1 * (9 + 1);
    let gameBoardStyle = {
      position: "relative",
      width: "100%",
      height: "100%",
      borderWidth: "0px",
      borderStyle: "none",
      margin: "0px 0px 0px 0px",
      padding: "0px 0px 0px 0px"
    };
    let containerStyle = {
      position: "static",
      width: width + "px",
      height: width + "px",
      borderWidth: "0px",
      borderStyle: "none",
      margin: "0px 0px 0px 0px",
      padding: "0px 0px 0px 0px"
    };
    return (
      <div style={containerStyle}>
        <div style={gameBoardStyle}>
          <canvas id="gameboard_bg">
          </canvas>
        </div>
      </div>
    );
  }
}

ReactDOM.render(
  <GameBoard />,
  document.getElementById('line98EntryPoint')
);</textarea>





                                    </div>
                                    <br />
                                    <input
                                      class="view_switch"
                                      type="button"
                                      value="hide exercise"
                                      onclick="document.getElementById('impl_ver_010$').click();"
                                      title="click to hide Implement version 0.1.0 exercise"
                                    />
                                </div>
                            </div>
                        </div>





</div>





                    </div>
                </div>
            </div>
        </div>
        <div ID=" III.3. Refs and the DOM" class="para_sep1">
            <div><b>3. Refs and the DOM</b></div>
            <div ID=" III.3.1. Purpose">
                <div>
                    <i>3.1 Purpose</i>
                </div>
                <div class="lindent00">
                    <div>
                        Refs provide a way to access real HTML DOM nodes or
                        React component created in the render method. This
                        is meaningful to:
                    </div>
                    <div class="lindent0a">
                        Managing focus, text selection, or media playback. In
                        our Line 98 game case, we could access to canvas real
                        HTML DOM node via ref instead of via its declared id
                        <i>gameboard_bg</i>.
                    </div>
                    <div class="lindent0a">
                        Integrating with third-party DOM libraries.
                    </div>
                    <div class="lindent0a">
                        Triggering imperative animations.
                    </div>
                </div>
            </div>
            <div ID=" III.3.2. Steps to create a ref" class="para_sep1">
                <div>
                    <i>3.2 Steps to create a ref</i>
                </div>
                <div class="lindent00">
                    <div>
                        <i>3.2.1 Create with React.createRef()</i>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Create a ref in <i>constructor</i> method by
                            <i>React.createRef()</i> method, assign it to
                            Component property for later access:
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:3.2.1:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
constructor(props) {
  super(props);
  this.myRef = React.createRef(); // assign it to Component property named myRef for later access
}</textarea>





                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Assign property <i>myRef </i> to <i>ref</i> JSX
                            attribute in method <i>render()</i>:
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:3.2.1:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
render() {
  return <Hello ref={this.myRef} />;
}</textarea>





                        </div>
                    </div>
                </div>
                <div class="lindent00">
                    <div class="para_sep1">
                        <i>3.2.2 Let React creates it silently, then access it
                        via callback function</i>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Declare a bind call back function as a hook for
                            access:
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:3.2.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
onDivCreate = (elem) => {
  let _th☯is = this;
  elem.onclick = function () {
    alert(_th☯is.msg);
  }
}</textarea>





                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Assign this call back function to target element's
                            JSX attribute:
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:3.2.2:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
render() {
  this.msg = "Hello, Pham So Diep!";
  return <div ref={this.onDivCreate}>Click me fo☯r a hello message</div> ;
}</textarea>





                        </div>
                    </div>
                </div>
            </div>
            <div ID=" III.3.3. Access to ref" class="para_sep1">
                <div>
                    <i>3.3. Access to ref</i>
                </div>
                <div ID=" III.3.3.1 Life cycle" class="lindent00">
                    <div>
                        <i>3.3.1 Lifecycle</i>
                    </div>
                    <div>
                        <div>
                            <it>Ref</it> could be created in <i>constructor</i>
                            method implemenation, but it target reference is
                            only available after <i>render()</i> method
                            invoking. Thus, access should be done at
                            component lifecycle call back method 
                            <i>componentDidMount</i> for such availability.
                            For example, in method <i>componentDidMount</i>
                            implementation of below source code example, the
                            reference could be accessed via <i>current</i> 
                            property, so once the div tag is clicked, message
                            <i>"Hello, Pham Duc Huy!"</i> is showed instead of
                            the default one <i>"Hello, Pham So Diep!"</i>:
                            <input
                              id="snippet_331_life_cycle$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide example source code content"
                            />
                        </div>
                        <div class="lindent00">





<div class="snippet_331_life_cycle$content_is_displayed" style="display: none;">





<textarea id="jsxsrc:3.3.1:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import React from 'react';
import ReactDOM from 'react-dom';


class Hello extends React.Component {
  onDivCreate = (elem) => {
    let _th☯is = this;
    elem.onclick = function () {
      alert(_th☯is.msg);
    }
  }

  render() {
    this.msg = "Hello, Pham So Diep!";
    return <div ref={this.onDivCreate}>Click me fo☯r a hello message</div> ;
  }
}

class HelloContainer extends React.Component {
  constructor(props) {
    super(props);
    this.myRef = React.createRef(); // assign it to Component property for later access
  }

  render() {
    return <Hello ref={this.myRef}/>;
  }

  componentDidMount() {
    this.myRef.current.msg =
      "Hello, Pham Duc Huy!"; // the reference could be accessed via current property
  }
}

ReactDOM.render(
  <HelloContainer />,
  document.getElementById('line98EntryPoint')
);</textarea>





                            <br />
                            <input
                              class="view_switch"
                              type="button"
                              value="hide example source code"
                              onclick="document.getElementById('snippet_331_life_cycle$').click();"
                              title="click to hide example source code content"
                            />
</div>
                        </div>
                    </div>
                </div>
                <div ID=" III.3.3.2 Real HTML DOM node or React component" class="lindent00">
                    <div class="para_sep1">
                        <i>3.3.2 Real HTML DOM node or React component</i>
                    </div>
                    <div>
                        <div>
                            Object that Ref references to could be a real HTML
                            DOM node or React component. This depends to the JSX
                            of the refs attribute. In the case of JSX of HTML
                            tag, Ref references to real HTML DOM node, in the
                            case of JSX of React component, Ref references to
                            that React component. For example, in source code
                            example of section 3.3.1 Life cycle,
                        </div>
                        <div class="lindent0a">
                            <div>
                                JSX of HTML tag:
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:3.3.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<div ref={this.onDivCreate}>Click me fo☯r a hello message</div></textarea>





                            </div>
                            <div>
                                Ref references to a real HTML DOM node.
                                <i>onclick</i> is event hander call back
                                function of real HTML DOM node:
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:3.3.2:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
onDivCreate = (elem) => {
  let _thi☯s = this;
  elem.onclick = function () {
    alert(_this.msg);
  }
}</textarea>





                            </div>
                            <div>
                                <i>Note:</i> We could also access to
                                <i>elem.innerHTML</i> to alter div text content
                                if we need.
                            </div>
                        </div>
                        <div class="lindent0a">
                            <div>
                                JSX of React component:
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:3.3.2:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<Hello ref={this.myRef}/>;</textarea>





                            </div>
                            <div>
                                Ref references to React component.
                                <i>this.myRef.current</i> is reference of Hello
                                component. We altered <i>msg</i> property of
                                this component for alert message decoration:
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:3.3.2:4" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
componentDidMount() {
  this.myRef.current.msg =
    "Hello, Pham Duc Huy!"; // the reference could be accessed via current property
}</textarea>





                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div ID=" III.3.4. Best practices" class="para_sep1">
                <div>
                    <i>3.4 Best practices</i>
                </div>
                <div class="lindent00">
                    <div>
                        Don't Overuse Refs, because they manipulate on real DOM
                        and/or not follow React default dataflow behavior.
                    </div>
                    <div class="lindent0a">
                        Avoid <i>ref</i> callback is defined as an inline
                        function, use bound method instead.
                    </div>
                    <div class="lindent0a">
                        Avoid to use the <i>ref</i> attribute on function
                        components (function components is component that is
                        declared as Javascript function instead of ES6 class).
                    </div>
                </div>
            </div>
            <div ID=" III.3.5. Exercise" class="para_sep1">
                <div>
                    <i>3.5 Exercise</i>
                </div>
                <div>
                    <div class="lindent00">
                        We will develop Line 98 version 0.1.0 further to
                        version 0.1.1 in exercise 3.5.1, then to version 0.1.2.
                        in exercise 3.5.2. New verions try to remove id
                        <i>gameboard_bg</i> of canvas by implementing with
                        React Ref. Such removal is very helpfull if we need two
                        instances of Line 98 game in one web page.
                    </div>
                    <div ID=" III.3.5.1 Exercise" class="lindent00">
                        <div class="para_sep1">
                            <i>3.5.1 Leverage React Ref to remove id
                            gameboard_bg of canvas element</i>
                            <input
                              id="impl_exer_351$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide source code implementation of exercise 3.5.1"
                            />
                        </div>





<div class="impl_exer_351$content_is_displayed" style="display: none;">





                        <div>
                            <div>
                                Implementation steps are as below,
                                github source code is also available at
                                <a
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  href="https://github.com/phamsodiep/react_line_98_game/commit/5ff385d449f389ed863bc9d22986c6d2cd5085b4"
                                >
                                  link.
                                </a>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Implement <i>constructor</i> method to
                                    create gameboardBgRef
                                </div>
                                <div class="lindent00">





<textarea id="jsxsrc:3.5.1:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
constructor(props) {
  super(props);
  this.gameboardBgRef = React.createRef();
}</textarea>





                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Replace <i>canvas</i>'s HTML id with its
                                    React <i>ref</i> attribute:
                                </div>
                                <div class="lindent00">
<textarea id="jsxsrc:3.5.1:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
render() {
  .....

  return (
    <div style={containerStyle}>
      <div style={gameBoardStyle}>
        <canvas ref={this.gameboardBgRef}>
        </canvas>
      </div>
    </div>
  );
}</textarea>
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Retrieve <i>bgImg</i> in method
                                    <i>componentDidMount()</i> implementation
                                    by <i>this.gameboardBgRef.current;</i>
                                    instead of previous version one
                                    <i>
                                        document.getElementById("gameboard_bg")
                                    </i>:
                                </div>
                                <div class="lindent00">
<textarea id="jsxsrc:3.5.1:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
componentDidMount() {
  //let bgImg = document.getElementById("gameboard_bg");
  let bgImg = this.gameboardBgRef.current;
  //if (bgImg === null) return;
  let i = 0;

  .....
}</textarea>
                                </div>
                            </div>
                        </div>








</div>





                    </div>
                    <div ID=" III.3.5.2 Exercise" class="lindent00">
                        <div class="para_sep1">
                            <i>3.5.2 Alternative solution of 3.5.1 with out
                            implementing method componentDidMount</i>
                            <input
                              id="impl_exer_352$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide source code implementation of exercise 3.5.2"
                            />
                        </div>





<div class="impl_exer_352$content_is_displayed" style="display: none;">





                        <div>
                            <div>
                                Implementation steps are as below,
                                github source code is also available at
                                <a
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  href="https://github.com/phamsodiep/react_line_98_game/commit/ddf90a64f8812f42b144945be0c366412c4c4cf5"
                                >
                                  link.
                                </a>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    In method <i>render()</i> implementation,
                                    replace attribute <i>ref</i> of
                                    <i>canvas</i> from
                                    <i>this.gameboardBgRef</i>
                                    to <i>onCanvasCreate</i>:
                                </div>





<textarea id="jsxsrc:3.5.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
render() {
  .....

  return (
    <div style={containerStyle}>
      <div style={gameBoardStyle}>
        <canvas ref={this.onCanvasCreate}>
        </canvas>
      </div>
    </div>
  );
}</textarea>





                            </div>
                            <div class="lindent0a">
                                Remove method <i>constructor</i> implementation
                                since we do not need <i>this.gameboardBgRef</i>
                                anymore.
                            </div>
                            <div class="lindent0a">
                                <div>
                                    Refactor by renaming method
                                    <i>componentDidMount</i> to
                                    <i>onCanvasCreate</i> as a bind call back
                                    function, since we do not
                                    need this method is invoked in such
                                    lifecycle anymore, and change access to
                                    <i>bgImg</i> as below:
                                </div>





<textarea id="jsxsrc:3.5.2:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
//componentDidMount() {
onCanvasCreate = (bgImg) => {
  //let bgImg = this.gameboardBgRef.current;
  let i = 0;

  .....
}</textarea>





                            </div>
                        </div>





</div>





                    </div>
                </div>
            </div>
        </div>
        <div ID=" III.4. Handling Events" class="para_sep1">
            <div><b>4. Handling Events</b></div>
            <div ID=" III.4.1 Introduction">
                <div>
                    <i>4.1 Introduction</i>
                </div>
                <div class="lindent00">
                    We could handle events on real HTML DOM elements by Ref,
                    but it is not recommended to do that because of React
                    dataflow and React component data access (properties,
                    states...). Handling events with React elements is very
                    similar to handling events on DOM elements, with some
                    difference that is introduced in following section.
                </div>
            </div>
            <div ID=" III.4.2 Programming" class="para_sep1">
                <div>
                    <i>4.2 Programming</i>
                </div>
                <div ID=" III.4.2.1 JSX declartion" class="lindent00">
                    <div>
                        <i>4.2.1 JSX declartion:</i>
                    </div>
                    <div>
                        <div>
                            Events declartion syntax for JSX is as below:
                        </div>
                        <div class="lindent0a">
                            React events are named using camelCase, rather
                            than lowercase.
                        </div>
                        <div class="lindent0a">
                            With JSX you pass a function as the event handler,
                            rather than a string.
                        </div>
                    </div>
                    <div>
                        <div>
                            Example:
                        </div>
                        <div class="lindent00">
                            <div>





<textarea id="jsxsrc:4.2.1:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<button onClick={this.resetGame}>
  Reset
</button></textarea>





                            </div>
                        </div>
                    </div>
                </div>
                <div ID=" III.4.2.2 Handling Events method programming" class="lindent00">
                    <div class="para_sep1">
                        <i>4.2.2 Handling Events method programming:</i>
                    </div>
                    <div>
                        <div class="lindent0a">
                            <div>
                                To handle event without <i>this</i>
                                refrence access.
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:4.2.1:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
resetGame() {
  alert('Type of thi☯s is ' + (typeof this));
}
</textarea>






                            </div>
                        </div>
                        <div class="lindent0a">
                            <div>
                                To handle event with <i>this</i>
                                refrence access to React component, we need to
                                bind the method to <i>this</i>.
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:4.2.1:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
resetGame = () => {
  alert('Type of thi☯s is ' + (typeof this));
}
</textarea>





                            </div>
                        </div>
                        <div class="lindent0a">
                            <div>
                                To pass <i>parameters</i> to handle event, we
                                need to bind the method to <i>parameters</i>
                                too. The <i>this</i> reference must be the first
                                binded <i>parameter</i>.
                                <input
                                  id="parameters_event_demo_421$"
                                  class="view_switch"
                                  type="button"
                                  value="content is hidden"
                                  onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                                  title="click to show/hide source code example"
                                />
                            </div>





<div class="parameters_event_demo_421$content_is_displayed" style="display: none;">





                            <div class="lindent00">





<textarea id="jsxsrc:4.2.1:4" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';

class ResetButton extends React.Component {
  constructor(props) {
    super(props);
  }

  resetGame = (id) => {
    alert('Type of thi☯s: ' + (typeof this) + ' - id: ' + id);
  }

  render() {
    let id = 1998;
    return (
      <button onClick={(reactEventObj) => this.resetGame(id)}>
        Reset
      </button>
    );
  }
}

ReactDOM.render(
  <ResetButton />,
  document.getElementById('line98EntryPoint')
);</textarea>





                            </div>





</div>





                        </div>
                    </div>
                </div>
                <div ID=" III.4.2.3 Event propagation" class="lindent00">
                    <div class="para_sep1">
                        <i>4.2.3 Event propagation:</i>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Event is propagated from inner element to
                            outer element:
                            <input
                              id="propagation_demo_423$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide source code example"
                            />
                        </div>





<div class="propagation_demo_423$content_is_displayed" style="display: none;">





                        <div class="lindent00">





<textarea id="jsxsrc:4.2.3:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';


class ResetButton extends React.Component {
  constructor(props) {
    super(props);
  }

  resetGame = (id, eventObj) => {
    alert('Type of thi☯s: ' + (typeof this) + ' - id: ' + id);
  }

  render() {
    let divCallBackFunc = function () {
      alert('hi! I am div tag');
    };
    let id = 1998;
    return (
      <div onClick={divCallBackFunc}>
        <button onClick={(reactEventObj) => this.resetGame(id, reactEventObj)}>
          Reset
        </button>
      </div>
    );
  }
}

ReactDOM.render(
  <ResetButton />,
  document.getElementById('line98EntryPoint')
);</textarea>





                        </div>





</div>





                    </div>
                    <div class="lindent0a">
                        <div class="para_sep1">
                            To stop event propagation from inner element, invoke
                            method <i>stopPropagation</i>.
                            <input
                              id="stop_propagation_423$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide source code example"
                            />
                        </div>





<div class="stop_propagation_423$content_is_displayed" style="display: none;">





                        <div class="lindent00">





<textarea id="jsxsrc:4.2.3:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';


class ResetButton extends React.Component {
  constructor(props) {
    super(props);
  }

  resetGame = (id, eventObj) => {
    alert('Type of this: ' + (typeof this) + ' - id: ' + id);
    eventObj.stopPropagation();
  }

  render() {
    let divCallBackFunc = function () {
      alert('hi! I am div tag');
    };
    let id = 1998;
    return (
      <div onClick={divCallBackFunc}>
        <button onClick={(reactEventObj) => this.resetGame(id, reactEventObj)}>
          Reset
        </button>
      </div>
    );
  }
}

ReactDOM.render(
  <ResetButton />,
  document.getElementById('line98EntryPoint')
);</textarea>





                        </div>





</div>





                    </div>
                    <div class="lindent0a">
                        <div class="para_sep1">
                            To prevent default behavior (for example submit
                            form) just invoke method <i>preventDefault</i>.
                        </div>
                    </div>
                </div>
            </div>
            <div ID=" III.4.3 Exercises" class="para_sep1">
                <div>
                    <i>4.3 Exercises</i>
                </div>
                <div class="lindent00">
                    <div>
                        Implement <i>Button</i> component:
                    </div>
                    <div class="lindent0a">
                        Due to SDD – Software design description,
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html#fig_designed_class_diag"
                        >
                          <b>Figure</b> 3.3.2.1:
                          <i>System overview class diagram</i>,
                        </a>
                        <i>Button</i> stereotype is <i>Boundary</i>.
                        Thus, we will implement class <i>Button</i>
                        as React Component.
                    </div>
                    <div class="lindent0a">
                        <div>
                            As <i>II.2. Feature evolution</i> section, version 0.2
                            implements <i>Reset Game</i> use case. The first
                            subversion of this version, 0.2.1, we will implement
                            a <i>Button</i> that trigger to show an alert message
                            <i>'Game reseting...'</i>.
                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            As <i>I. Game introduction</i> section,
                            <i>Question 7</i>:
                        </div>
                        <div class="lindent0b">
                            <i>Button</i>'s css requires
                            customization. We will implement a <i>Button</i>
                            supports customized css name passed as component's
                            property named <i>className</i>.
                        </div>
                        <div class="lindent0b">
                            <i>Button</i>'s caption requires
                            customization. We will pass this parameter as
                            component's property named <i>caption</i>.
                        </div>
                    </div>
                </div>
                <div class="lindent00">
                    <div>
                        Source code implementation is as below,
                        github source code is also available at
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href="https://github.com/phamsodiep/react_line_98_game/commit/0952218ba495a312922456852361f296e0093882"
                        >
                          link.
                        </a>
                        <input
                          id="impl_exer_43$"
                          class="view_switch"
                          type="button"
                          value="content is hidden"
                          onclick="switchDisplay(this, ['index.html', 'index.js', 'content is hidden']);"
                          title="click to switch view between source code file in list: index.js, index.html"
                        />
                    </div>





<div class="impl_exer_43$index.html" style="display: none;">
                    <div class="lindent00">





<textarea id="jsxsrc:4.3:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Line 98</title>
  </head>
  <body>
    <style>
      div.reset_button {
        border-radius:25px;
        background:#73ad21;
        padding:20px;
        width:50px;
        height:25px;
        text-align:center
      }
    </style>
    <div id="line98ResetButton"></div>
    <br />
    <div id="line98EntryPoint"></div>
  </body>
</html></textarea>





                    </div>
</div>





<div class="impl_exer_43$index.js" style="display: none;">
                    <div class="lindent00">





<textarea id="jsxsrc:4.3:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';

class ResetButton extends React.Component {
  resetGame() {
    alert('Game reseting...');
  }

  render() {
    let caption = this.props.caption;
    caption = typeof caption === "string" ? caption : "Reset";
    return (
      <div className={this.props.className} onClick={this.resetGame}>
        {caption}
      </div>
    );
  }
}

ReactDOM.render(
  <ResetButton className="reset_button" caption="重置" />,
  document.getElementById('line98ResetButton')
);</textarea>





                    </div>
</div>





                </div>
            </div>
        </div>
        <div ID=" III.5. State" class="para_sep1">
            <div><b>5. State</b></div>
            <div ID=" III.5.1. Concepts">
                <div>
                    <i>5.1. Concepts</i>
                </div>
                <div class="lindent00">
                    <div>
                        From OOP perspective, state are all attributes values
                        of an object. From React Component perspective, this
                        term is used with a little variant. <i>State</i> is a
                        special attributes of React Component that:
                    </div>
                    <div class="lindent0a">
                        It is local or encapsulated, it is not accessible to
                        any other component. (<i>To share it, component could
                        pass its value to child component via React properties,
                        because React properties is readonly, child component
                        could not change parent component state.</i>)
                    </div>
                    <div class="lindent0a">
                        Changing <i>state</i> values following programming
                        convention results in React Component re-render to
                        reflect this data update.
                    </div>
                </div>
            </div>
            <div ID=" III.5.2. Access">
                <div class="para_sep1">
                    <i>5.2. Access</i>
                </div>
                <div class="lindent00">
                    <div>
                        Access is done via React component class special
                        property <i>this.state</i>. For example:
                        <input
                          id="state_access_demo_52$"
                          class="view_switch"
                          type="button"
                          value="content is hidden"
                          onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                          title="click to show/hide State access example content"
                        />
                    </div>





<div class="state_access_demo_52$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:5.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
        counter: 1
    };
  }

  render() {
    return (
      <div>
        <h1>{this.state.counter}</h1>
      </div>
    );
  }
}

ReactDOM.render(
  <Hello />,
  document.getElementById('line98EntryPoint')
);</textarea>
</div>





                </div>
            </div>
            <div ID=" III.5.3. Request re-render">
                <div class="para_sep1">
                    <i>5.3. Request re-render</i>
                </div>
                <div class="lindent00">
                    Directly assigning to <i>this.state</i> property of
                    component class does not result in method <i>render()</i>
                    is invoked by React. We could request React re-render to
                    reflect this state changing by invoking to
                    <i>this.forceUpdate()</i>.
                </div>
            </div>
            <div ID=" III.5.4. Update convention">
                <div class="para_sep1">
                    <i>5.4. Update convention</i>
                </div>
                <div class="lindent00">
                    <div>
                        <i>State</i> updating could results in component
                        re-render (React invokes <i>render()</i> method), if we
                        invoke <i>this.setState()</i> method instead of directly
                        assign as <i>constructor</i> method implementation. For
                        example, below source code will re-render to display
                        updated <i>counter</i> once div tag is clicked.
                        <input
                          id="update_convention_demo_53$"
                          class="view_switch"
                          type="button"
                          value="content is hidden"
                          onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                          title="click to show/hide Update convention example demonstration source code"
                        />
                    </div>
                    <div class="lindent00">





<div class="update_convention_demo_53$content_is_displayed" style="display: none;">





<textarea id="jsxsrc:5.2:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.counter = 1;
    this.state = {
      caption: "Current: ",
      counter: this.counter
    };
  }

  onUpCounter = () => {
    this.counter++;
    this.setState({
      counter: this.counter
    });
  }

  render() {
    return (
      <div onClick={this.onUpCounter}>
        <h1>
          <span>{this.state.caption}</span>
          <span>{this.state.counter}</span>
        </h1>
      </div>
    );
  }
}

ReactDOM.render(
  <Hello />,
  document.getElementById('line98EntryPoint')
);
</textarea>





</div>





                    </div>
                </div>
                    <div class="lindent00">
                        <i>Note</i>: <i>this.setState()</i> method does not
                        update state entirely, it merges state instead. Thus,
                        just <i>counter</i> is merged back to
                        <i>this.state.counter</i>, the remains properties of
                        <i>this.state</i> is untouched
                        (<i>this.state.caption</i>).
                    </div>
            </div>
            <div ID=" III.5.5. Passing state to child component">
                <div class="para_sep1">
                    <i>5.5. Passing state to child component</i>
                </div>
                <div ID=" III.5.5.1. Passing state" class="lindent00">
                    <div>
                        <i>5.5.1. Passing state</i>
                    </div>
                    <div>
                        Just pass desired property of <i>this.state</i> to child
                        component via child component property. For example, as
                        below source code demonstration:
                        <input
                          id="passing_state_to_child_541$"
                          class="view_switch"
                          type="button"
                          value="content is hidden"
                          onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                          title="click to show/hide passing state to child component example source code"
                        />
                    </div>





<div class="passing_state_to_child_541$content_is_displayed" style="display: none;">





                    <div class="lindent00">





<textarea id="jsxsrc:5.4.1:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import React from 'react';
import ReactDOM from 'react-dom';

class ProgressIndicators extends React.Component {
  render() {
    let step = typeof this.props.percent === "number" ?
      Math.floor(this.props.percent / 10) % 11 : 0;
    let containerWidth = 120;
    let indicatorWidth = step * 12;
    let containerStyle = {
      height: 12,
      width: containerWidth,
      backgroundColor: "lightblue"
    };
    let indicatorStyle = {
      height: 12,
      width: indicatorWidth,
      backgroundColor: "black"
    };
    return (
      <div style={containerStyle}>
        <div style={indicatorStyle}>
        </div>
      </div>
    );
  }
}

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      percent: 50
    };
  }

  render() {
    return (
      <div>
        <ProgressIndicators percent={this.state.percent} />
      </div>
    );
  }
}

ReactDOM.render(
  <Counter />,
  document.getElementById('line98EntryPoint')
);</textarea>





                    </div>





</div>





                </div>
                <div ID=" III.5.5.2. Synchronous updating for state and properties" class="lindent00">
                    <div class="para_sep1">
                        <i>
                            5.5.2. Synchronous updating for state and properties
                        </i>
                    </div>
                    <div>
                        Component rendering is based on both <i>this.state</i>
                        and <i>this.props</i>. However, <i>this.state</i> could
                        be updated by an event handler, this results in
                        <i>this.state</i> and <i>this.props</i> values are not
                        synchronized. To make sure updating is synchronized,
                        we invoke the second version of <i>this.setState()</i>
                        method which accepts a callback function as parameter.
                        React will invoke this callback function to update state
                        once the values is synchronous available. For example,
                        as below source code demonstration:
                        <input
                          id="state_properties_synchronous_updating_542$"
                          class="view_switch"
                          type="button"
                          value="content is hidden"
                          onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                          title="click to show/hide synchronous updating for state and properties example source code"
                        />
                    </div>
                    <div class="lindent00">





<div class="state_properties_synchronous_updating_542$content_is_displayed" style="display: none;">





<textarea id="jsxsrc:5.5.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import React from 'react';
import ReactDOM from 'react-dom';

class ProgressIndicators extends React.Component {
  render() {
    let step = typeof this.props.percent === "number" ?
      Math.floor(this.props.percent / 10) % 11 : 0;
    let containerWidth = 120;
    let indicatorWidth = step * 12;
    let containerStyle = {
      height: 12,
      width: containerWidth,
      backgroundColor: "lightblue"
    };
    let indicatorStyle = {
      height: 12,
      width: indicatorWidth,
      backgroundColor: "black"
    };
    return (
      <div style={containerStyle}>
        <div style={indicatorStyle}>
        </div>
      </div>
    );
  }
}

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      percent: 0
    };
  }

  onUpCounter = () => {
    this.setState((state, props) => ({
      percent: (state.percent + 10) % 110
    }));
  }

  render() {
    return (
      <div onClick={this.onUpCounter}>
        <ProgressIndicators percent={this.state.percent} />
      </div>
    );
  }
}

ReactDOM.render(
  <Counter />,
  document.getElementById('line98EntryPoint')
);</textarea>





</div>





                    </div>
                </div>
            </div>
            <div ID=" III.5.6. Exercise">
                <div class="para_sep1">
                    <i>5.6. Exercise</i>
                </div>
                <div class="lindent00">
                    Implement version <i>0.2.2</i>, clicking reset
                    <i>Button</i> results in system initializes a
                    <i>Game Board</i> with full of <i>Ball</i>s rendered
                    in cyan colour.
                    <br />
                    <input
                      id="exercise_content_56$"
                      class="view_switch"
                      type="button"
                      value="content is hidden"
                      onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                      title="click to show/hide exercise 5.6. content"
                    />
                </div>





<div class="exercise_content_56$content_is_displayed" style="display: none;">





                <div class="lindent00">
                    <div>
                        Due to SDD – Software design description,
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html#fig_designed_class_diag"
                        >
                          <b>Figure</b> 3.3.2.1:
                          <i>System overview class diagram</i>:
                        </a>
                    </div>
                    <div class="lindent0a">
                        <i>GameBoard</i> implements <i>BallManager</i>, with
                        note that cell without ball has a null ball to listen
                        on select cell event.
                        Thus, we will implement interface <i>BallManager</i>
                        to render such null ball for <i>Reset Game</i> use case.
                    </div>
                    <div class="lindent0a">
                        Because of null balls, rendered colour is transparent.
                        However, for debug purpose, rendered colour is
                        temporary set to cyan.
                    </div>
                </div>
                <div class="lindent00">
                    <div>
                        Implementation steps are as below, github source code
                        is also available at
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href="#9a72622e7ffaf93197a382ab25bd6a6bfafd9c69"
                        >
                          link.
                        </a>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Implement <i>resetGame()</i> method for
                            <i>GameBoard</i> (<i>BallManager</i> interface
                            of class <i>GameBoard</i>):
                            <input
                              id="reset_game_55$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide resetGame() method source code content"
                            />
                        </div>
                        <div class="lindent00">





<div class="reset_game_55$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:5.6:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

resetGame() {
  let dimension = 9;
  let balls = [];
  let i = 0;
  let j = 0;
  for (i = 0; i < dimension; i++) {
    balls[i] = [];
    for (j = 0; j < dimension; j++) {
      balls[i][j] = 1; // cyan colour
    }
  }
  // Update balls property of this.state by this function
  // results in this.render() method invoked by React
  this.setState((state, props) => ({
    balls: balls
  }));
}
</textarea>
</div>





                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Implement to render balls:
                            <input
                              id="render_ball_55$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide resetGame() method source code content"
                            />
                        </div>
                        <div class="lindent00">





<div class="render_ball_55$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:5.6:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

render() {
  .....

  let balls = this.createBalls();
  return (
    <div style={containerStyle}>
      <div style={gameBoardStyle}>
        <canvas ref={this.onCanvasCreate}>
        </canvas>
        {balls}
      </div>
    </div>
  );
}

createBalls() {
  if (this.state === null) { // this.state is null if resetGame() is not invoked
    return [];
  }
  let dimension = 9;
  let balls = [];
  let i = 0;
  let j = 0;
  for (i = 0; i < dimension; i++) {
    for (j = 0; j < dimension; j++) {
      balls[balls.length] = this.createBall(i, j, this.state.balls[i][j]);
    }
  }
  return balls;
}

createBall(r, c, colourId) {
  let thick = 1;
  let cellSize = 50;
  let sz = cellSize + thick;
  let left = c * sz;
  let top = r * sz;

  return (<Ball
    left={left}
    top={top}
    colourId={colourId}
  />);
}
</textarea>
</div>





                        </div>
                    </div>





                    <div class="lindent0a">
                        <div>
                            Implement to invoke <i>resetGame()</i> once
                            <i>ResetButton</i> is clicked:
                            <input
                              id="reset_game_trigger_55$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide resetGame() method source code content"
                            />
                        </div>
                        <div class="lindent00">





<div class="reset_game_trigger_55$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:5.6:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
// Save GameBoard reference to gameBoardRef global variable
var gameBoardRef = ReactDOM.render(
  <GameBoard />,
  document.getElementById('line98EntryPoint')
);

class ResetButton extends React.Component {
  .....

  resetGame() {
    //alert('Game reseting...');
    // invoke GameBoard reference resetGame() method
    gameBoardRef.resetGame();
  }
}
</textarea>
</div>





                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Implement class <i>Ball</i>:
                            <input
                              id="ball_class_55$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide resetGame() method source code content"
                            />
                        </div>
                        <div class="lindent00">





<div class="ball_class_55$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:5.6:4" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

const COLOUR_LIST = [
  null,
  "#00ccff",
  "#ffff00",
  "#33cc33",
  "#0000ff",
  "#cc3300",
  "#ff66ff",
  "#ff9900"
];

class Ball extends React.Component {
  getColourId() {
    return this.props.colourId >= 0 && this.props.colourId <= 7 ?
      this.props.colourId : 0;
  }

  getCellStyle() {
    let thick = 1;
    let cellSize = 50;
    let size = cellSize + thick;

    return {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      margin: "auto",
      position: "absolute",
      width: size,
      height: size,
      left: this.props.left,
      top: this.props.top
    };
  }

  deriveBallStyle(colourId) {
    let thick = 1;
    let cellSize = 50;
    let size = cellSize + thick;
    let ballSize = Math.floor(size * 60.0 / 100.0);

    return {
      display: "block",
      width: ballSize + "px",
      height: ballSize + "px",
      background: COLOUR_LIST[colourId],
      borderRadius: "50%",
      padding: "0px",
      borderWidth: "0px",
      borderStyle: "none",
    };
  }

  render() {
    let colourId = this.getColourId();
    let cellStyle = this.getCellStyle();
    let ballStyle = this.deriveBallStyle(colourId);

    return (
      <div style={cellStyle}>
        <div style={ballStyle}>
        </div>
      </div>
    );
  }
}
</textarea>
</div>





                        </div>
                    </div>




                </div>
                <div class="lindent00">
                    <div>
                        <i>Side effect of 'this.setState'</i>:
                    </div>
                    <div class="lindent0a">
                        <div>
                            <i>Side effect</i>: Invoking
                            <i>this.resetGame()</i> in <i>constructor</i>
                            context of component class <i>GameBoard</i> does
                            not results in first render of <i>GameBoard</i>
                            has full of Balls rendered in cyan colour.
                            Because invoking:
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:5.6:5" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
this.setState((state, props) => ({
  balls: balls
}));</textarea>





                        </div>
                        <div>
                            does not update state immediately. It just schedules
                            an update with a callback function. In the case of
                            <i>constructor</i> context, <i>render()</i> method
                            will be invoked before this state update.
                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            <i>Solution</i>:
                        </div>
                        <div class="lindent0b">
                            <div>
                                <i>resetGame</i> method implementation should
                                assign <i>this.state</i> component class
                                property directly for <i>constructor</i>
                                <i>resetGame</i> effect (<i>Browser actor
                                initiates  Reset Game use case</i>).
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:5.6:6" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
this.state = {
  balls: balls
};</textarea>





                            </div>
                        </div>
                        <div class="lindent0b">
                            <div>
                                <i>resetGame</i> method implementation invokes
                                method <i>this.forceUpdate()</i> for
                                <i>ResetButton</i> event handler effect
                                (<i>Player actor initiates Reset Game use case
                                by button clicking</i>).
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:5.6:7" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
this.state = {
  balls: balls
};
this.forceUpdate();</textarea>





                            </div>
                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            <i>Final source code:</i>
                        </div>
                        <div class="lindent00">
                            Final source code with this side effect fixing is
                            as below, github source code is also available at
                            <a
                              target="_blank"
                              rel="noopener noreferrer"
                              href="https://github.com/phamsodiep/react_line_98_game/commit/2e2fb708b6568167e8449c1dfcc56257da6a5cdb"
                            >
                              link.
                            </a>
                            <br />
                            <input
                              id="side_effect_fixing_56$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide side effect fixing source code"
                            />
                        </div>
                        <div class="lindent00">





<div class="side_effect_fixing_56$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:5.6:8" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';


const COLOUR_LIST = [
  null,
  "#00ccff",
  "#ffff00",
  "#33cc33",
  "#0000ff",
  "#cc3300",
  "#ff66ff",
  "#ff9900"
];

class ResetButton extends React.Component {
  resetGame() {
    gameBoardRef.resetGame();
  }

  render() {
    let caption = this.props.caption;
    caption = typeof caption === "string" ? caption : "Reset";
    return (
      <div className={this.props.className} onClick={this.resetGame}>
        {caption}
      </div>
    );
  }
}

class Ball extends React.Component {
  getColourId() {
    return this.props.colourId >= 0 && this.props.colourId <= 7 ?
      this.props.colourId : 0;
  }

  getCellStyle() {
    let thick = 1;
    let cellSize = 50;
    let size = cellSize + thick;

    return {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      margin: "auto",
      position: "absolute",
      width: size,
      height: size,
      left: this.props.left,
      top: this.props.top
    };
  }

  deriveBallStyle(colourId) {
    let thick = 1;
    let cellSize = 50;
    let size = cellSize + thick;
    let ballSize = Math.floor(size * 60.0 / 100.0);

    return {
      display: "block",
      width: ballSize + "px",
      height: ballSize + "px",
      background: COLOUR_LIST[colourId],
      borderRadius: "50%",
      padding: "0px",
      borderWidth: "0px",
      borderStyle: "none",
    };
  }

  render() {
    let colourId = this.getColourId();
    let cellStyle = this.getCellStyle();
    let ballStyle = this.deriveBallStyle(colourId);

    return (
      <div style={cellStyle}>
        <div style={ballStyle}>
        </div>
      </div>
    );
  }
}

class GameBoard extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      balls: []
    };
    this.resetGame();
  }

  onCanvasCreate = (bgImg) => {
    let i = 0;
    let n = 9; // dimension
    let thick = 1;
    let cellSize = 50;
    let width = n * cellSize + thick * (n + thick);

    // Context retrieving and initializing
    bgImg.width = width;
    bgImg.height = width;
    bgImg.style.position = "absolute";
    bgImg.style.left = 0;
    bgImg.style.top = 0;
    let canvasContext = bgImg.getContext("2d");
    canvasContext.translate(0, 0);
    canvasContext.lineWidth = 1;

    // Render board surface
    canvasContext.fillStyle = "#eeeeee";
    canvasContext.fillRect(
      0,
      0,
      width,
      width
    );

    // Render board cells border
    // |  |  |...
    canvasContext.fillStyle = "#000000";
    for (i = 0; i <= n; i++) {
      let x = i * (cellSize + thick);
      canvasContext.fillRect(x, 0, thick, width);
    }
    // =
    for (i = 0; i <= n; i++) {
      let y = i * (cellSize + thick);
      canvasContext.fillRect(0, y, width, thick);
    }
  }

  render() {
    // dimension * cellSize + lineWidth * (dimension + 1)
    let width = 9 * 50 + 1 * (9 + 1);
    let gameBoardStyle = {
      position: "relative",
      width: "100%",
      height: "100%",
      borderWidth: "0px",
      borderStyle: "none",
      margin: "0px 0px 0px 0px",
      padding: "0px 0px 0px 0px"
    };
    let containerStyle = {
      position: "static",
      width: width + "px",
      height: width + "px",
      borderWidth: "0px",
      borderStyle: "none",
      margin: "0px 0px 0px 0px",
      padding: "0px 0px 0px 0px"
    };
    let balls = this.createBalls();

    return (
      <div style={containerStyle}>
        <div style={gameBoardStyle}>
          <canvas ref={this.onCanvasCreate}>
          </canvas>
          {balls}
        </div>
      </div>
    );
  }


  //////////////////////////////////////////////////////////////////////////////
  // BallManager interface
  //////////////////////////////////////////////////////////////////////////////
  resetGame() {
    let dimension = 9;
    let i = 0;
    let j = 0;
    for (i = 0; i < dimension; i++) {
      this.state.balls[i] = [];
      for (j = 0; j < dimension; j++) {
        this.state.balls[i][j] = 1; // cyan colour
      }
    }
    this.forceUpdate();
  }

  createBalls() {
    if (this.state === null) { // this.state is null if resetGame() is not invoked
      return [];
    }
    let dimension = 9;
    let balls = [];
    let i = 0;
    let j = 0;
    for (i = 0; i < dimension; i++) {
      for (j = 0; j < dimension; j++) {
        balls[balls.length] = this.createBall(i, j, this.state.balls[i][j]);
      }
    }
    return balls;
  }

  createBall(r, c, colourId) {
    let thick = 1;
    let cellSize = 50;
    let sz = cellSize + thick;
    let left = c * sz;
    let top = r * sz;

    return (<Ball
      left={left}
      top={top}
      colourId={colourId}
    />);
  }
}

var gameBoardRef = ReactDOM.render(
  <GameBoard />,
  document.getElementById('line98EntryPoint')
);

ReactDOM.render(
  <ResetButton className="reset_button" caption="重置" />,
  document.getElementById('line98ResetButton')
);
</textarea>
                        <input
                          class="view_switch"
                          type="button"
                          value="hide final source code"
                          onclick="document.getElementById('side_effect_fixing_56$').click();"
                          title="click to hide final source code of exercise 5.6"
                        />
</div>





                        </div>
                    </div>
                </div>
            </div>





</div>





        </div>
        <div ID=" III.6. Lifting State Up" class="para_sep1">
            <div><b>6. Lifting State Up</b></div>
            <div ID=" III.6.1. Purpose">
                <div>
                    <i>6.1. Purpose</i>
                </div>
                <div class="lindent00">
                    <div>
                        Let's examinine below case to see an example of
                        lifting state up.
                        Due to SDD – Software design description,
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html#fig_ball_states_diag"
                        >
                          <b>Figure</b> 5.2:
                          <i>Ball state machine diagram</i>,
                        </a>
                        ball state is <i>Ball</i> class internal private data,
                        it should be implemented as React state. Let's review
                        below scenario:
                    </div>
                    <div class="lindent00">
                        1. <i>Player</i> clicks a cyan ball at cell (2, 7).
                    </div>
                    <div class="lindent00">
                        2. System render ball at cell (2, 7) in <i>Focused</i>
                        state.
                    </div>
                    <div class="lindent00">
                        3. <i>Player</i> clicks a red ball at cell (6, 5).
                    </div>
                    <div class="lindent00">
                        <div>4. System does below steps:</div>
                        <div class="lindent00">
                            4.1. System renders ball at cell (2, 7) as normal
                            (in <i>OperatingDone</i> state).
                        </div>
                        <div class="lindent00">
                            4.2. System renders ball at cell (6, 5) in
                            <i>Focused</i> state.
                        </div>
                    </div>
                    <div>
                        <div>It is noted that:</div>
                        <div class="lindent0a">
                            At step #2, ball at cell (2, 7) updates it's state
                            to <i>Focused</i>. That is enough.
                        </div>
                        <div class="lindent0a">
                            At step #4, ball at cell (6, 5) updates it's
                            state to <i>Focused</i>. That is not enough, it is
                            also required that ball at cell (2, 7) updates it's
                            state to <i>OperatingDone</i> state.
                        </div>
                        <div>
                            <div>
                                Thus, for this case, we need a way to send
                                message from ball at cell (6, 5) to ball
                                at cell (2, 7) to request it updates it's
                                state to <i>OperatingDone</i> state. To make
                                thing simple in a manageable way:
                            </div>
                            <div class="lindent00">
                                1. Ball at cell (6, 5) sends message to it's
                                parent component <i>GameBoard</i> which
                                implements <i>BallManager</i> interface
                                to notify it's new state.
                            </div>
                            <div class="lindent00">
                                2. <i>GameBoard</i> notifies (by sending
                                message) to ball at cell (2, 7) to request it
                                updates it's state to <i>OperatingDone</i>
                                state.
                            </div>
                            <div>
                                To do this, <i>GameBoard</i>'s state should
                                include previous focused ball, so
                                focused ball information is stored in two
                                classes: <i>GameBoard</i> and <i>Ball</i>.
                                Data duplication is not a programming
                                best practices. To avoid this, we could store
                                focused ball information in <i>GameBoard</i>,
                                then <i>GameBoard</i> will share this
                                information to <i>Ball</i> via React property.
                                Such approach is lifting state up, because
                                ball <i>Focused</i> state is lifted up to it's
                                parent component <i>GameBoard</i>.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div ID=" III.6.2. Concept">
                <div>
                    <i>6.2. Concept</i>
                </div>
                <div class="lindent00">
                    In React, sharing state is accomplished by moving
                    it up to the closest common ancestor of the components
                    that need it. This is called "lifting state up".
                </div>
            </div>
            <div ID=" III.6.3. Exercise">
                <div>
                    <i>6.3. Exercise</i>
                </div>
                <div class="lindent00">
                    <div>
                        We will implement version <i>0.3.1</i> supporting
                        <i>Player</i> selects <i>Ball</i> and re-selects
                        <i>Ball</i> (switch <i>Ball</i> focus).
                        Due to SDD – Software design description,
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html#designclasses_png"
                        >
                          <b>Figure</b> 5.1:
                          <i>Implementation class diagram</i>,
                        </a>
                        <i>BallManager</i> interface is implemented by class
                        <i>GameBoard</i> and <i>Ball</i> co-operates as a
                        sub system. We will implement class <i>Ball</i> with
                        lifting state up:
                    </div>
                    <div class="lindent0a">
                        <i>GameBoard</i> will pass click handle event call back
                        function to <i>Ball</i> via <i>onClick(id)</i> property.
                        This gives <i>Ball</i> a way to notify <i>GameBoard</i>
                        about <i>Player</i> click event (<i>id</i> is
                        identifier of <i>Ball</i> object.).
                    </div>
                    <div class="lindent0a">
                        <div>
                            <i>GameBoard</i> will pass requested animation
                            demonstration to <i>Ball</i> via <i>animation</i>
                            property as a css animation style string. This
                            results in:
                        </div>
                        <div class="lindent0b">
                            <i>Ball</i>'s state is stored at <i>GameBoard</i>.
                        </div>
                        <div class="lindent0b">
                            <i>GameBoard</i> takes the responsible to compute
                            animation css for <i>Ball</i>.
                        </div>
                    </div>
                    <div>
                        Developing from version <i>0.2.2</i> to version
                        <i>0.3.1</i> is as below, github source code is
                        also available at
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href="https://github.com/phamsodiep/react_line_98_game/commit/2d158cdff07911b56374cc407de623e58e2ff292"
                        >
                          link.
                        </a>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Develope <i>Ball</i> component to process
                            <i>animation</i> and <i>onClick</i> properties:
                            <input
                              id="impl_ver_031_step1$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide source code demonstration"
                            />
                        </div>
                        <div class="lindent00">





<div class="impl_ver_031_step1$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:6.3:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
onClick = () => {
  if (typeof this.props.onClick === "function") {
    this.props.onClick(this.props.id);
  }
}

render() {
  let colourId = this.getColourId();
  let cellStyle = this.getCellStyle();
  let ballStyle = this.deriveBallStyle(colourId);
  ballStyle.animation = this.props.animation;

  return (
    <div style={cellStyle}>
      <div style={ballStyle} onClick={this.onClick}>
      </div>
    </div>
  );
}</textarea>
</div>





                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Develope <i>GameBoard</i> component to process
                            <i>onClick</i> event handler to update current
                            focused ball and passing processed ball focused
                            state as it's css animation properties to component
                            <i>Ball</i> via it's properties in <i>render()</i>
                            method implementation:
                            <input
                              id="impl_ver_031_step2$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide source code demonstration"
                            />
                        </div>
                        <div class="lindent00">





<div class="impl_ver_031_step2$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:6.3:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
constructor(props) {
  super(props);
  this.state = {
    balls: [],
    focusedBallId: -1
  };
  this.resetGame();
}

onClick = (id) => {
  this.setState((state, props) => ({
    focusedBallId: id
  }));
}

createBall(r, c, colourId) {
  let dimension = 9;
  let ballId = r * dimension + c;
  let animation = this.state.focusedBallId === ballId ?
    "ballFocused 0.25s linear 0s infinite alternate" : null;

  .....

  return (<Ball
    id={ballId}
    left={left}
    top={top}
    colourId={colourId}
    onClick={this.onClick}
    animation={animation}
  />);
}</textarea>
</div>





                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            Implement to create focused animation css:
                            <input
                              id="impl_ver_031_step3$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                              title="click to show/hide source code demonstration"
                            />
                        </div>
                        <div class="lindent00">





<div class="impl_ver_031_step3$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:6.3:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
function initializeAnimationCsses() {
  let cssNode = document.createElement('STYLE');
  let entryPoint = document.getElementById('line98EntryPoint');
  let parentNode = entryPoint.parentNode;
  let cssStr = `
    @keyframes ballFocused {
      from {}
      to {margin-bottom: 15px}
    }
  `;
  cssNode.type = 'text/css';
  cssNode.innerHTML = cssStr;
  cssNode = parentNode.insertBefore(cssNode, entryPoint);
}

initializeAnimationCsses();</textarea>
</div>





                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div ID=" III.7. Forms" class="para_sep1">
            <div><b>7. Forms</b></div>
            <div ID=" III.7.1. Introduction">
                <div>
                    <i>7.1. Introduction</i>
                </div>
                <div class="lindent00">
                    HTML form elements work a little bit differently from
                    other DOM elements in React, because form elements
                    naturally keep some internal state. For most case, we
                    need to handle form submission programatically by
                    JavaScript code (for example REST api client which normal
                    form submission simply could not solve the problem). This
                    section and its subsection show how to use
                    <i>controlled components</i>, a new React concept to
                    archive this.
                </div>
            </div>
            <div ID=" III.7.2. Controlled Components">
                <div class="para_sep1">
                    <i>7.2. Controlled Components</i>
                </div>
                <div class="lindent00">
                    <i>Controlled Components</i> is input form element whose
                    value is controlled by React so that the React state be
                    the "single source of truth".
                </div>
                <div class="lindent00">
                    <div>
                        The attribute of value (<i>null</i>,
                        <i>literal constant</i>, <i>variable</i>) of components
                        defines what type of components could be:
                    </div>
                    <div class="lindent0a">
                        <div>
                            <i>variable</i>: components could be a
                            <i>Controlled Components</i>
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:7.2:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<input type="text" value={this.state.value} /></textarea>





                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            <i>null</i>: components is editable but it could
                            not be a <i>Controlled Components</i>.
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:7.2:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<input type="text" value={null} /></textarea>





                        </div>
                    </div>
                    <div class="lindent0a">
                        <div>
                            <i>literal constant</i>: components is readonly and
                            it could be a <i>Controlled Components</i>.
                        </div>
                        <div class="lindent00">





<textarea id="jsxsrc:7.2:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<input type="text" value="administrator" /></textarea>





                        </div>
                    </div>
                </div>






                <div class="lindent00">
                    <div>
                        For file input tag, since its value is read only, it
                        could not be a <i>Controlled Components</i>:
                    </div>
                    <div class="lindent00">





<textarea id="jsxsrc:7.2:4" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<input type="file" /></textarea>





                    </div>
                </div>






            </div>
            <div ID=" III.7.3. Controlled Components Implementation">
                <div class="para_sep1">
                    <i>7.3. Controlled Components Implementation</i>
                </div>
                <div class="lindent00">
                    <div>
                        <div>
                            <i>7.3.1. Implementation</i>
                        </div>
                        <div>
                            To controls input form element whose value:
                        </div>
                        <div class="lindent0a">
                            <div>
                                Pass React state to form element value
                                (React property <i>value</i>):
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:7.3:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
<input
  type="text"
  value={this.state.value}
/></textarea>





                            </div>
                        </div>
                        <div class="lindent0a">
                            <div>
                                Implement <i>onChange</i> event handler of
                                form element to handle data change binding
                                since React property is readonly for two
                                way binding implementation.
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:7.3:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
handleChange = (e) => {
  this.setState({
    value: e.target.value
  });
}

.....

render() {
  return (

        .....

        <input
          type="text"
          value={this.state.value}
          onChange={this.handleChange}
        />

        .....

  );
}</textarea>





                            </div>
                        </div>
                        <div class="lindent0a">
                            <div>
                                Final source code is as below:
                                <input
                                  id="controlled_components_impl_demo_73$"
                                  class="view_switch"
                                  type="button"
                                  value="content is hidden"
                                  onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                                  title="click to show/hide Controlled Components implementation demonstration"
                                />
                            </div>
                            <div class="lindent00">





<div class="controlled_components_impl_demo_73$content_is_displayed" style="display: none;">
<textarea id="jsxsrc:7.3:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
import React from 'react';
import ReactDOM from 'react-dom';

class WinPriceForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: ''
    };
  }

  handleChange = (e) => {
    this.setState({
      value: e.target.value
    });
  }

  render() {
    return (
      <form>
        <label>
          Player's name:
          <input
            type="text"
            value={this.state.value}
            onChange={this.handleChange}
          />
        </label>
        &nbsp;
        <input type="submit" value="Submit" />
      </form>
    );
  }
}

ReactDOM.render(
  <WinPriceForm />,
  document.getElementById('line98EntryPoint')
);</textarea>
</div>





                            </div>
                        </div>
                    </div>
                    <div>
                        <div class="para_sep1">
                            <i>7.3.2. Handling Multiple Inputs</i>
                        </div>
                        <div>
                            Instead write each handler for each input, we
                            could write a shared one. To aware which target
                            input handler is processing, it could test via
                            <i>event.target.name</i>:
                        </div>




                            <div class="lindent00">





<textarea id="jsxsrc:7.3:4" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
handleChange = (e) => {
  if (e.target.name === "name") {
    this.setState({
      name: e.target.value
    });
  }
  else if (e.target.name === "email") {
    this.setState({
      email: e.target.value
    });
  }

  // Without if else conditional check implementation
  // let updatedValue = {};
  // updatedValue[e.target.name] = e.target.value;
  // this.setState(updatedValue);
}

.....

render() {
  return (

        .....

        <input
          type="text"
          name="name"
          value={this.state.name}
          onChange={this.handleChange}
        />

        .....

        <input
          type="text"
          name="email"
          value={this.state.email}
          onChange={this.handleChange}
        />

        .....

  );
}</textarea>





                            </div>
                    </div>
                    <div>
                        <div class="para_sep1">
                            <i>7.3.3. Handle HTTP request</i>
                        </div>
                        <div>
                            <div>
                                To handle form submission programatically
                                by JavaScript code so that we could make an
                                HTTP request, implement <i>handleSubmit</i>
                                event handler with an invoking to
                                <i>preventDefault()</i> to prevent default
                                form submission:
                            </div>
                            <div class="lindent00">





<textarea id="jsxsrc:7.3:5" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

handleSubmit = (e) => {
  e.preventDefault();
  let json = JSON.stringify(this.state);
  alert(json); // @TODO process for HTTP request by axios instead of alerting.
}

render() {
  return (
    <form onSubmit={this.handleSubmit}>
      <label>
        Player's name:
        <input
          type="text"
          value={this.state.value}
          onChange={this.handleChange}
        />
      </label>
      <input type="submit" value="Submit" />
    </form>
  );
}</textarea>





                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div ID=" III.7.4. Exercise">
                <div class="para_sep1">
                    <i>7.4. Exercise</i>
                </div>
                <div class="lindent00">
                    T.B.D. (We will implement ContentOnwer system as a
                    Line98 actor, this is outside the implemeneted system.)
                </div>
            </div>
        </div>
        <div ID=" III.8. Code Splitting" class="para_sep1">
            <div><b>8. Code Splitting</b></div>
            <div ID=" III.8.1. Introduction">
                <div>
                    <i>8.1. Introduction</i>
                </div>
                <div class="lindent00">
                    That is all the basic concepts from the nutshell view,
                    <i>Code Splitting</i> belongs to advance topic which
                    could be found at
                    <a
                      target="_blank"
                      rel="noopener noreferrer"
                      title="https://reactjs.org/docs/accessibility.html"
                      href="https://reactjs.org/docs/accessibility.html"
                    >
                      link.
                    </a>
                    This section introduces a little about
                    <i>Code Splitting</i> to organize source code into
                    .js file as module units for <i>Line 98</i> game
                    implementation. <i>Code Splitting</i> could be archived
                    by import and export. Some symbols (class, constant,
                    function...) could be defined or implemented in another
                    source file and declared as export symbol. The client
                    code could import the symbols for such definition or
                    implementation available.
                </div>
            </div>
            <div ID=" III.8.2. Import, export">
                <div class="para_sep1">
                    <i>8.2. Import, export</i>
                </div>
                <div class="lindent00">
                    <div>
                        <div><i>Import</i> syntax:</div>
                        <div class="lindent00">
                            <i>import</i> { <i>$symbol</i> } from
                            '<i>$source_file_path</i>';
                        </div>
                        <div><i>Where</i></div>
                        <div class="lindent0a">
                            <i>$symbol</i>: target import symbol, it could be
                            a class, a constant, a function...
                        </div>
                        <div class="lindent0a">
                            <i>$source_file_path</i>: source code file path
                            that defines/implements the symbol.
                        </div>
                    </div>
                    <div>
                        <div><i>Example</i>:</div>
                        <div class="lindent00">
                            import { <i>GameBoard</i> } from
                            '<i>./game-board.js</i>';
                        </div>
                    </div>
                </div>
                <div class="lindent00">
                    <div class="para_sep1">
                        <div>
                            <i>Export</i> syntax: place <i>export</i> keyword
                            before declaration/definition of constant or
                            class.
                        </div>
                        <div>
                            <div><i>Example</i>:</div>
                            <div class="lindent00">
                                export class <i>GameBoard</i> extends
                                React.Component
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div ID=" III.8.3. Exercises">
                <div class="para_sep1">
                    <i>8.3. Exercises</i>
                </div>
                <div class="lindent00">
                    <div>
                        We will implement version <i>0.4.1</i> with source
                        code modularized.
                        Due to SDD – Software design description,
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html#fig_reset_game_seq_diag"
                        >
                          <b>Figure</b> 3.3.2.2:
                          <i>Reset Game sequence diagram</i>,
                        </a>
                        we need to implement these classes: Button, GameEngine,
                        GameState and BallManager and BallManagerListener
                        interface.
                        <div>
                            <div>
                                Class or interface methods are defined in
                                <a
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html#designclasses_png"
                                >
                                    <b>Figure</b> 5.1:
                                    <i>Implementation class diagram</i>,
                                </a>
                                it is noted that:
                            </div>
                            <div class="lindent0a">
                                Class <i>Button</i> is refactored to
                                <i>ResetButton</i>.
                            </div>
                            <div class="lindent0a">
                                Property <i>this.state.balls</i> of class
                                <i>GameBoard</i> (interface <i>BallManager</i>
                                implementation) is not game state
                                (<i>GameState</i>). This is state of class
                                <i>Ball</i> is lifted up.
                            </div>
                        </div>
                    </div>
                    <div class="para_sep0">
                        <div>
                            We add a new class <i>Ball</i> to co-operate
                            with <i>BallManager</i> interface
                            (class <i>GameBoard</i>) to fulfill ball
                            interacts with actor <i>Player</i>
                            responsibility as section <i>5.2.1. Ball</i> of
                            <a
                              target="_blank"
                              rel="noopener noreferrer"
                              href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html#fig_ball_states_diag"
                            >
                              <i>SDD document</i>:
                            </a>
                        </div>
                        <div class="lindent0a">
                            <div>
                                <i>Ball</i>
                            </div>
                            <div class="lindent0b">
                                <i>Source code file name:</i>
                                game-board.js
                            </div>
                            <div class="lindent0b">
                                <div><i>Methods:</i></div>
                                <div class="lindent0c">
                                    <i>onClick()</i>: lift state up to its
                                    parent component <i>GameBoard</i>. This
                                    method is not implemented in version
                                    <i>0.4.1</i> since <i>Reset Game</i>
                                    use case does not need it.
                                </div>
                                <div class="lindent0c">
                                    <i>render()</i>: render <i>Ball</i>,
                                    suport animation displaying.
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="para_sep0">
                        <div>
                            We will just implement the methods set
                            for use case <i>Reset Game</i>:
                        </div>
                        <div>
                            <div class="lindent0a">
                                <div>
                                    <i>ResetButton</i>
                                </div>
                                <div class="lindent0b">
                                    <i>Source code file name:</i>
                                    reset-button.js
                                </div>
                                <div class="lindent0b">
                                    <div><i>Methods:</i></div>
                                    <div class="lindent0c">
                                        n/a (Player's <i>onClick()</i> event
                                        handler will be retrieved from
                                        <i>ResetListener</i> which is passed
                                        as a React component property)
                                    </div>
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    <i>BallManager</i>
                                </div>
                                <div class="lindent0b">
                                    <i>Source code file name:</i>
                                    ball-manager.js
                                </div>
                                <div class="lindent0b">
                                    <div><i>Methods:</i></div>
                                    <div class="lindent0c">
                                        <i>resetGame()</i>: interface with
                                        <i>GameEngine</i>, process request
                                        from <i>GameEngine</i> to initialize
                                        a <i>GameBoard</i> will full of null
                                        balls.
                                    </div>
                                    <div class="lindent0c">
                                        <i>generateBallsAnimation</i>:
                                        interface with <i>GameEngine</i>,
                                        process request from <i>GameEngine</i>
                                        to display/demonstrate ball generating.
                                    </div>
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    <i>GameEngine</i>
                                </div>
                                <div class="lindent0b">
                                    <i>Source code file name:</i>
                                    game-engine.js
                                </div>
                                <div class="lindent0b">
                                    <div><i>Methods:</i> n/a</div>
                                </div>
                                <div class="lindent0b">
                                    <div><i>Interfaces:</i></div>
                                    <div class="lindent0c">
                                        <div>
                                            <i>ResetListener</i>
                                        </div>
                                        <div class="lindent0c">
                                            <i>Source code file name:</i>
                                            reset-listener.js
                                        </div>
                                        <div class="lindent0c">
                                            <div><i>Methods:</i></div>
                                            <div class="lindent0c">
                                                <i>resetGame()</i>:
                                                interface with
                                                <i>ResetButton</i>, implement
                                                reset game logic.
                                            </div>
                                        </div>
                                    </div>
                                    <div class="lindent0c">
                                        <div>
                                            <i>BallManagerListener</i>
                                        </div>
                                        <div class="lindent0b">
                                            <i>Source code file name:</i>
                                            ball-manager-listener.js
                                        </div>
                                        <div class="lindent0b">
                                            <div><i>Methods:</i></div>
                                            <div class="lindent0c">
                                                <i>animationDone()</i>: interface
                                                with <i>BallManager</i>, be
                                                notified by <i>BallManager</i>
                                                about animation done event.
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    <i>GameState</i>
                                </div>
                                <div class="lindent0b">
                                    <i>Source code file name:</i>
                                    game-state.js
                                </div>
                                <div class="lindent0b">
                                    <div><i>Methods:</i></div>
                                    <div class="lindent0c">
                                        <i>resetGame()</i>:
                                        re-itialize game's state.
                                    </div>
                                    <div class="lindent0c">
                                        <i>generateBalls()</i>:
                                        update game state so that there are
                                        three additional generated balls.
                                    </div>
                                    <div class="lindent0c">
                                        <i>setState()</i>:
                                        update game state as
                                        <a
                                          target="_blank"
                                          rel="noopener noreferrer"
                                          href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html#fig_state_machine_state_machine_diag"
                                        >
                                          <i>System state machine diagram</i>
                                        </a>
                                        (SDD document).
                                    </div>
                                    <div class="lindent0c">
                                        <i>getState()</i>: get current state.
                                    </div>
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    <i>Line98</i>
                                </div>
                                <div class="lindent0b">
                                    <i>Source code file name:</i>
                                    index.js
                                </div>
                                <div class="lindent0b">
                                    <div><i>Methods:</i></div>
                                    <div class="lindent0c">
                                        <i>constructor(namePrefix)</i>:
                                        create an instance of game with web
                                        page div tag id prefixed with
                                        <i>namePrefix</i> as <i>Question 7</i>
                                        section
                                        <a
                                          target="_blank"
                                          rel="noopener noreferrer"
                                          href="https://huyj2ee.blogspot.com/2019/04/se-iconix-use-case-driven-design-case.html"
                                        >
                                          <i>I. Game introduction</i>
                                        </a>
                                        (SDD document).
                                    </div>
                                    <div class="lindent0c">
                                        <i>defaultInitialize()</i>: intialiaze
                                        game normally.
                                    </div>
                                </div>
                            </div>
                            <div class="lindent0a">
                                <div>
                                    <i>Configuration</i>
                                </div>
                                <div class="lindent0b">
                                    <i>Source code file name:</i>
                                    common.js
                                </div>
                                <div class="lindent0b">
                                    <i>Description:</i> this file houses
                                    common, shared <i>constant</i>,
                                    <i>functions</i> used for
                                    configuration setup.
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="para_sep1">
                        <div>
                            Sources code implementation is as below, github
                            source code is also available at
                            <a
                              target="_blank"
                              rel="noopener noreferrer"
                              href="https://github.com/phamsodiep/react_line_98_game/commit/d8ffc483c26cba237ca6e24e4f450c6cf54599fa"
                            >
                                link.
                            </a>
                        </div>
                        <div>
                            <input
                              id="impl_ver_041$"
                              class="view_switch"
                              type="button"
                              value="content is hidden"
                              onclick="switchDisplay(this, ['content is hidden', 'index.js', 'game-board.js', 'ball-manager.js', 'game-state.js', 'game-engine.js', 'reset-listener.js', 'ball-manager-listener.js', 'reset-button.js', 'common.js']);"
                              title="click to switch between source code files"
                            />
                        </div>
                        <div class="lindent00">





<div class="impl_ver_041$index.js" style="display: none;">
<textarea id="jsxsrc:8.3:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import React from 'react';
import ReactDOM from 'react-dom';
import {
  GAME_CONFIG
} from './common.js';
import { GameBoard } from './game-board.js';
import { BallManager } from './ball-manager.js';
import { BallManagerListener } from './ball-manager-listener.js';
import { ResetListener } from './reset-listener.js';
import { GameState } from './game-state.js';
import { GameEngine } from './game-engine.js';
import { ResetButton } from './reset-button';



class Line98 {
  constructor(namePrefix) {
    this.dimension = GAME_CONFIG.BOARD_DIMENSION;
    this.namePrefix = namePrefix;
  }

  defaultInitialize() {
    // Initializing should be done from boundary to controller then to entity
    this.initializeAnimationCsses();
    this.initializeGameBoard();
    this.initializeGameEngine();
    // ResetButton should be initialized finally sothat the engine is ready
    this.initializeResetButton();
    this.engine.resetGame();
  }

  initializeAnimationCsses() {
    let i = 0;
    let cssNode = document.createElement('STYLE');
    let entryPoint = document.getElementById(this.namePrefix + 'EntryPoint');
    let parentNode = entryPoint.parentNode;
    let cssStr = "";
    cssNode.type = 'text/css';
    for (i = 0; i < GAME_CONFIG.COLOUR_LIST.length; i++) {
      cssStr += `
        @keyframes ballGenerating${i} {
          from {
            background: ${GAME_CONFIG.COLOUR_LIST[i]};
            width: 0px;
            height: 0px;
          }
          to {
            background: ${GAME_CONFIG.COLOUR_LIST[i]};
          }
        }
      `;
    }
    cssNode.innerHTML = cssStr;
    cssNode = parentNode.insertBefore(cssNode, entryPoint);
  }

  initializeGameBoard() {
    let dim = this.dimension.toString();
    this.ballManager = ReactDOM.render(
      <GameBoard cellSize="50" lineWidth="1" dimension={dim} />,
      document.getElementById(this.namePrefix + 'EntryPoint')
    );
    // Add BallManager interface implementation to GameBoard
    Object.assign(this.ballManager, BallManager);
  }

  initializeGameEngine() {
    let gameState = new GameState(this.dimension);
    let engine = new GameEngine(
      gameState,
      this.ballManager
    );
    // Add ResetListener interface implementation to GameEngine
    Object.assign(engine, ResetListener);
    // Add BallManagerListener interface implementation to GameEngine
    Object.assign(engine, BallManagerListener);
    this.ballManager.ballManagerListener = engine;
    this.engine = engine;
  }

  initializeResetButton() {
    let className = "resetButton";
    let resetButton = document.getElementById(this.namePrefix + 'ResetButton');
    if (resetButton !== null) {
      ReactDOM.render(
        <ResetButton className={className} resetListener={this.engine} />,
        resetButton
      );
    }
  }
}



new Line98("line98").defaultInitialize(); </textarea>
</div>





<div class="impl_ver_041$game-board.js" style="display: none;">
<textarea id="jsxsrc:8.3:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import React from 'react';
import {
  GAME_CONFIG,
  deriveGameConfig,
  getGameBoardStyle
} from './common.js';



export class GameBoard extends React.Component {
  constructor(props) {
    super(props);
    this.config = deriveGameConfig(
      50,
      1,
      9
    );
    this.state = {
      animatedBalls: [],
      balls: []
    };
  }

  onCanvasCreate = (elem) => {
    let i = 0;
    let n = this.config.dimension;
    let thick = this.config.lineWidth;
    let cellSize = this.config.cellSize;

    // Context retrieving and initializing
    elem.width = this.config.width;
    elem.height = this.config.height;
    elem.style.position = "absolute";
    elem.style.left = 0;
    elem.style.top = 0;
    this.canvasContext = elem.getContext("2d");
    this.canvasContext.translate(0, 0);
    this.canvasContext.lineWidth = 1;

    // Render board surface
    this.canvasContext.fillStyle = "#eeeeee";
    this.canvasContext.fillRect(
      0,
      0,
      this.config.width,
      this.config.height
    );

    // Render board cells border
    // |  |  |...
    this.canvasContext.fillStyle = "#000000";
    for (i = 0; i <= n; i++) {
      let x = i * (cellSize + thick);
      this.canvasContext.fillRect(x, 0, thick, this.config.height);
    }
    // =
    for (i = 0; i <= n; i++) {
      let y = i * (cellSize + thick);
      this.canvasContext.fillRect(0, y, this.config.width, thick);
    }
  }

  render() {
    let gameBoardStyle = getGameBoardStyle();
    let containerStyle = getGameBoardStyle();
    containerStyle.position = "static";
    containerStyle.width = this.config.width + "px";
    containerStyle.height = this.config.height + "px";
    let balls =
      typeof this.createBalls === "undefined" ? "": this.createBalls();

    return (
      <div style={containerStyle}>
        <div style={gameBoardStyle}>
          <canvas ref={this.onCanvasCreate}>
          </canvas>
          {balls}
        </div>
      </div>
    );
  }
}


export class Ball extends React.Component {
  constructor(props) {
    super(props);
    this.config = {
      ballSize: Math.floor(
        this.props.size * 60.0 / 100.0
      )
    };
  }

  onBallCreate = (elem) => {
    elem.addEventListener(
      "animationstart",
      this.onAnimationStart,
      false
    );
    elem.addEventListener(
      "animationend",
      this.onAnimationEnd,
      false
    );
  }

  getColourId() {
    return this.props.colourId >= 0 && this.props.colourId <= 7 ?
      this.props.colourId : 0;
  }

  getCellStyle() {
    return {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      margin: "auto",
      position: "absolute",
      width: this.props.size,
      height: this.props.size,
      left: this.props.left,
      top: this.props.top
    };
  }

  deriveBallStyle(colourId) {
    return {
      display: "block",
      width: this.config.ballSize + "px",
      height: this.config.ballSize + "px",
      background: GAME_CONFIG.COLOUR_LIST[colourId],
      borderRadius: "50%",
      padding: "0px",
      borderWidth: "0px",
      borderStyle: "none",
    };
  }

  onAnimationStart = () => {
  }

  onAnimationEnd = () => {
    if (this.props.ballManager !== null) {
      this.props.ballManager.ballManagerListener.animationDone(this.props.id);
    }
  }

  render() {
    let colourId = this.getColourId();
    let cellStyle = this.getCellStyle();
    let ballStyle = this.deriveBallStyle(colourId);
    ballStyle.animation = this.props.animation;

    return (
      <div style={cellStyle}>
        <div
          style={ballStyle}
          ref={this.onBallCreate}
        >
        </div>
      </div>
    );
  }
}</textarea>
</div>





<div class="impl_ver_041$ball-manager.js" style="display: none;">
<textarea id="jsxsrc:8.3:3" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import React from 'react';
import {
  GAME_CONFIG,
  BALL_STATE
} from './common.js';
import { Ball } from './game-board.js';



export var BallManager = {
  createBall(r, c, colourId) {
    const ANI_SPEED = GAME_CONFIG.BALL_MOVING_SPEED * 5;
    let id = r * this.config.dimension + c;
    let sz = this.config.cellSize + this.config.lineWidth;
    let left = c * sz;
    let top = r * sz;
    let animation = "none";
    let animatedIdx = this.state.animatedBalls.indexOf(id);
    let isLast = animatedIdx === this.state.animatedBalls.length - 1;
    let ballManager = isLast ? this : null;

    if (this.ballState === BALL_STATE.MOVING) {
      // @TODO: implement me
    }
    else if (colourId !== 0) {
      switch(this.ballState) {
        case BALL_STATE.GENERATING:
          if (animatedIdx >= 0) {
            animation =
              `ballGenerating${colourId} ${ANI_SPEED}s linear 0s 1 normal`;
          }
        break;

        case BALL_STATE.FOCUSED:
          // @TODO: implement me
        break;

        case BALL_STATE.REMOVING:
          // @TODO: implement me
        break;

        default:
        break;
      }
    }

    return (<Ball
      id={id}
      left={left}
      top={top}
      size={sz}
      colourId={colourId}
      ballManager={ballManager}
      animation={animation}
    />);
  },

  createBalls() {
    let balls = [];
    let i = 0;
    let j = 0;
    for (i = 0; i < this.config.dimension; i++) {
      for (j = 0; j < this.config.dimension; j++) {
        balls[balls.length] = this.createBall(i, j, this.state.balls[i][j]);
      }
    }
    return balls;
  },

  resetGame() {
    this.ballState = BALL_STATE.OPERATING_DONE;
    ///////this.onClick = this.onClick.bind(this);
    let isNew = this.state.balls.length < this.config.dimension;
    let i = 0;
    let j = 0;
    for (i = 0; i < this.config.dimension; i++) {
      if (isNew) {
        this.state.balls[i] = [];
      }
      for (j = 0; j < this.config.dimension; j++) {
        this.state.balls[i][j] = 0;
      }
    }
    this.state.animatedBalls = [];
    this.forceUpdate();
  },

  generateBallsAnimation(balls) {
    if (Array.isArray(balls)) {
      let animatedBalls = [];
      let dimension = this.config.dimension;
      let i = 0;
      let id = 0;
      for (i = 0; i < balls.length; i++) {
        id = balls[i][0];
        let colourId = balls[i][1];
        let r = Math.floor(id / dimension);
        let c = id % dimension;
        this.state.balls[r][c] = colourId;
        animatedBalls[animatedBalls.length] = id;
      }
      this.ballState = BALL_STATE.GENERATING;
      this.setState({
        animatedBalls: animatedBalls
      });
    }
  }
};</textarea>
</div>





<div class="impl_ver_041$game-state.js" style="display: none;">
<textarea id="jsxsrc:8.3:4" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import {
  GAME_STATE
} from './common.js';



export class GameState {
  constructor(dimension) {
    let matrix = [];
    let i = 0;
    let j = 0;
    for (i = 0; i < dimension; i++) {
      let row = [];
      for (j = 0; j < dimension; j++) {
        row[row.length] = 0;
      }
      matrix[matrix.length] = row;
    }
    this.cellCount = dimension * dimension;
    this.matrix = matrix;
    this.gameState = GAME_STATE.INITIALIZING;
  }

  getState() {
    return this.gameState;
  }

  setState(state) {
    this.gameState = state;
    return true;
  }

  resetGame() {
    let dimension = this.matrix.length;
    let i = 0;
    let j = 0;
    for (i = 0; i < dimension; i++) {
      for (j = 0; j < dimension; j++) {
        this.matrix[i][j] = 0;
      }
    }
    this.gameState = GAME_STATE.INITIALIZING;
  }

  getCellColourIndex(id) {
    let dimension = this.matrix.length;
    if (id >= this.cellCount) {
      return 0;
    }
    let r = Math.floor(id / dimension);
    let c = id % dimension;
    return this.matrix[r][c];
  }

  generateBallPosition() {
    let maxIdx = this.cellCount;
    let idx = 0;
    // re-generate because cell is occupied
    for (
      idx = Math.floor(Math.random() * maxIdx);
      this.getCellColourIndex(idx) !== 0;
      idx = Math.floor(Math.random() * maxIdx)
    );
    return idx;
  }

  generateBalls(count) {
    let dimension = this.matrix.length;
    let balls = Array(count);
    let i = 0;
    let idx = 0;
    for (i = 0; i < count; i++) {
      idx = this.generateBallPosition();
      let colourId = Math.floor(Math.random() * 7) + 1;
      // Generate ball cheat code for debug purpose
      /*if (document.getElementById('genCheat') !== null && i === 0) {
        let txts = document.getElementById('genCheat').value.split(" ");
        if (txts.length == 2) {
          idx = parseInt(txts[0]);
          colourId = parseInt(txts[1]);
        }
      }*/
      let j = 0;
      for (j = i - 1; j >= 0; j--) {
        if (idx === balls[j][0]) {
          // re-generate because of duplicated position
          idx = this.generateBallPosition();
          j = i - 1;
        }
      }
      balls[i] = [idx, colourId];
      let r = Math.floor(idx / dimension);
      let c = idx % dimension;
      this.matrix[r][c] = colourId;
    }
    return balls;
  }
}</textarea>
</div>





<div class="impl_ver_041$game-engine.js" style="display: none;">
<textarea id="jsxsrc:8.3:5" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

export class GameEngine {
  constructor(gameState, ballManager) {
    this.gameState = gameState;
    this.ballManager = ballManager;
  }
}</textarea>
</div>





<div class="impl_ver_041$reset-listener.js" style="display: none;">
<textarea id="jsxsrc:8.3:6" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import {
  GAME_CONFIG,
  GAME_STATE,
} from './common.js';



export var ResetListener = {
  resetGame() {
    this.gameState.resetGame();
    this.ballManager.resetGame();
    let balls = this.gameState.generateBalls(GAME_CONFIG.BALL_GENERATING_COUNT);
    this.gameState.setState(GAME_STATE.BALL_GENERATING);
    let _this = this;
    setTimeout(function () {
      _this.ballManager.generateBallsAnimation(balls);
    }, 2);
  }
};</textarea>
</div>





<div class="impl_ver_041$ball-manager-listener.js" style="display: none;">
<textarea id="jsxsrc:8.3:7" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import {
//  GAME_CONFIG,
  GAME_STATE,
  BALL_STATE
} from './common.js';



export var BallManagerListener = {
  animationDone(lastBall) {
    let state = this.gameState.getState();
    switch (state) {
      case GAME_STATE.BALL_GENERATING:
        this.gameState.setState(GAME_STATE.MOVE_WAITING);
        this.ballManager.ballState = BALL_STATE.OPERATING_DONE;
      break;

      default:
      break;
    }
  }
}</textarea>
</div>





<div class="impl_ver_041$reset-button.js" style="display: none;">
<textarea id="jsxsrc:8.3:8" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

import React from 'react';



export class ResetButton extends React.Component {
  constructor(props) {
    super(props);
    let resetListener = this.props.resetListener;
    if (
      typeof resetListener != "undefined" &&
      typeof resetListener.resetGame != "undefined"
    ) {
      this.resetGame = resetListener.resetGame.bind(resetListener);
    }
  }

  render() {
    let caption = this.props.caption;
    caption = typeof caption === "string" ? caption : "Reset";
    return (
      <div className={this.props.className} onClick={this.resetGame}>
        {caption}
      </div>
    );
  }
}</textarea>
</div>





<div class="impl_ver_041$common.js" style="display: none;">
<textarea id="jsxsrc:8.3:9" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">

export const GAME_CONFIG = {
  WIN_PRICE_SCORE:       15,
  BOARD_DIMENSION:       9,
  BALL_MOVING_SPEED:     0.05, // moving step of ball demostration duration
  BALL_GENERATING_COUNT: 3,
  MIN_BALLS_TO_SCORE:    5,
  COLOUR_LIST: [
    null,
    "#00ccff",
    "#ffff00",
    "#33cc33",
    "#0000ff",
    "#cc3300",
    "#ff66ff",
    "#ff9900"
  ]
};

export const GAME_STATE = {
  INITIALIZING:    0,
  BALL_GENERATING: 1,
  MOVE_WAITING:    2,
  FOCUSED:         3,
  BALL_MOVING:     4,
  BALL_SCORING:    5,
  GAME_OVER:       100,
  WIN_PRICE:       101,
};

export const BALL_STATE = {
  INITIALIZING:    0,
  OPERATING_DONE:  1,
  GENERATING:      2,
  FOCUSED:         3,
  MOVING:          4,
  REMOVING:        5
};



export function deriveGameConfig(cellSize, lineWidth, dimension) {
  let cellSz = typeof cellSize  === "number" ? cellSize  : 50;
  let dim = typeof dimension === "number" ? dimension : 9;
  let lineW = typeof lineWidth === "number" ?
    (lineWidth % 2 === 0 ? lineWidth + 1 : lineWidth) : 1;
  let width = dim * cellSz + lineW *(dim + 1);
  return {
    cellSize: cellSz,
    lineWidth: lineW,
    dimension: dim,
    width: width,
    height: width
  };
}

export function getGameBoardStyle() {
  return {
    position: "relative",
    width: "100%",
    height: "100%",
    borderWidth: "0px",
    borderStyle: "none",
    margin: "0px 0px 0px 0px",
    padding: "0px 0px 0px 0px"
  };
}</textarea>
</div>





                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div ID=" III.9. The code story" class="para_sep1">
            <div><b>9. The code story</b></div>
            <div ID=" III.9.1. Introduction">
                <div>
                    <i>9.1. Introduction</i>
                </div>
                <div class="lindent00">
                    T.B.D.
                </div>
            </div>
        </div>
    </div>
    <div ID=" IV. References" class="para_sep1">
        <div>
            <b>IV. References</b>
        </div>
        <div class="lindent0a">
            <i>React tutorial</i>: https://reactjs.org/docs/hello-world.html
        </div>
        <div class="lindent0a">
            <div><i>React documents</i>:</div>
            <div>
                <div class="lindent0a">
                    <a
                      target="_blank"
                      rel="noopener noreferrer"
                      href="https://reactjs.org/docs/refs-and-the-dom.html"
                    >
                      Refs and the DOM
                    </a>
                </div>
            </div>
        </div>
        <div class="lindent0a">
            <i>Stack overflow</i>: https://stackoverflow.com/
        </div>
    </div>
</div>


<div id="githubsrc" class="hidden">Source: https://github.com/phamsodiep/blogger/blob/master/phamsodiep/js-jsx-react-in-a-nutshell.htm</div>
<div id="githubver" class="hidden">0.0.9</div>
<script>doDefaultDecorate();</script>
<script>
function doScrollIntoViewDecoration() {
  let topLvElem = document.getElementById("entry_article");
  // Extract targetId
  let targetId = "";
  let curUrl = window.location.href;
  let idx = curUrl.length;
  for (let ch = curUrl.charAt(--idx); ch !== '/'; ch = curUrl.charAt(--idx)) {
    if(ch === "#") {
      targetId = curUrl.substring(idx + 1);
      break;
    }
  }
  // id prefixed with 'cmd_' is reserved to command param sent to app
  let isCmd = targetId.startsWith("cmd_");
  if (isCmd) {
    return;
  }
  // retrieve element
  let targetElem = document.getElementById(targetId);
  if (!(targetElem !== null && topLvElem !== null)) {
    return;
  }
  // travel up and search for hidden div
  let classNames = [];
  let groups = [];
  let stateNames = [];
  for (let elem = targetElem.parentNode; elem !== topLvElem; elem = elem.parentNode) {
    if (elem.nodeName === "DIV" &&  elem.style.display === "none") {
      let className = elem.className;
      let endIdx = className.indexOf("$");
      if (endIdx >= 0) {
        classNames[classNames.length] = className;
        groups[groups.length] = className.substring(0, endIdx);
        stateNames[stateNames.length] =
          className.substring(endIdx + 1).split("_").join(" ");
      }
    }
  }
  // do decoration by clicking button
  for(let i = 0; i < groups.length; i++) {
    let elemId = groups[i] + "$";
    let elem = document.getElementById(elemId);
    if (elem !== null) {
      for (
        let curStateName = elem.value.toString();
        curStateName !== stateNames[i];
        curStateName = elem.value.toString()
      ) {
        elem.click();
      }
    }
  }
  // Scroll to
  targetElem.scrollIntoView();
}
doScrollIntoViewDecoration();


const DiepSrcCode = {
  FORMAT_JAVA: 0,
  FORMAT_JS: 1,

  FORMATS: [
    // FORMAT_JAVA
    [
      ["  ", "&nbsp;&nbsp;"],
      ["package", "<b style='color: olive;'>package</b>"],
      ["import", "<b style='color: olive;'>import</b>"],
      ["public", "<b style='color: green;'>public</b>"],
      ["private", "<b style='color: green;'>private</b>"],
      ["void", "<b style='color: green;'>void</b>"],
      ["for", "<b style='color: maroon;'>for</b>"],
      ["if", "<b style='color: maroon;'>if</b>"],
      ["this", "<b style='color: maroon;'>this</b>"],
      ["return", "<b style='color: maroon;'>return</b>"]
    ],
    // FORMAT_JS
    [
      ["  ", "&nbsp;&nbsp;"],
      // keywords
      ["import[ ]", "<b style='color: blue;'>import</b>&nbsp;"],
      ["export[ ]", "<b style='color: blue;'>export</b>&nbsp;"],
      ["class[ ]", "<b style='color: blue;'>class</b>&nbsp;"],
      ["extends[ ]", "<b style='color: blue;'>extends</b>&nbsp;"],
      ["super[(]", "<b style='color: blue;'>super</b>("],
      ["new[ ]", "<b style='color: blue;'>new</b>&nbsp;"],
      ["constructor[(]", "<b style='color: darkgoldenrod;'>constructor</b>("],
      ["[ ]undefined", "&nbsp;<b style='color: blueviolet;'>undefined</b>"],
      ["[ ]null", "&nbsp;<b style='color: blue;'>null</b>"],
      ["[ ]false", "&nbsp;<b style='color: blue;'>false</b>"],
      ["[ ]true", "&nbsp;<b style='color: blue;'>true</b>"],
      ["const[ ]", "<b style='color: blue;'>const</b>&nbsp;"],
      ["let[ ]", "<b style='color: blue;'>let</b>&nbsp;"],
      ["var[ ]", "<b style='color: blue;'>var</b>&nbsp;"],
      ["for[ ]", "<b style='color: blue;'>for</b>&nbsp;"],
      ["if[ ]", "<b style='color: blue;'>if</b>&nbsp;"],
      ["else[ ]", "<b style='color: blue;'>else</b>&nbsp;"],
      ["switch[(]", "<b style='color: blue;'>switch</b>("],
      ["case[ ]", "<b style='color: blue;'>case</b>&nbsp;"],
      ["break", "<b style='color: blue;'>break</b>"],
      ["default:", "<b style='color: blue;'>default</b>:"],
      ["this", "<b style='color: blue;'>this</b>"],
      ["return[ ]", "<b style='color: blue;'>return</b>&nbsp;"],
      ["typeof[ ]", "<b style='color: blue;'>typeof</b>&nbsp;"],
      ["function[ ]", "<b style='color: blue;'>function</b>&nbsp;"],

      // objects
      ["document[.]", "<b style='color: darkgoldenrod;'>document</b>."],
      ["Array", "<b style='color: blueviolet;'>Array</b>"],
      ["Math[.]", "<b style='color: blueviolet;'>Math</b>."],
      //["Object", "<b style='color: blueviolet;'>Object</b>"],
      // methods
      ["toString[(][)]", "<b style='color: blueviolet;'>toString</b>()"],
      ["setTimeout[(]", "<b style='color: darkgoldenrod;'>setTimeout</b>("],
      ["alert[(]", "<b style='color: darkgoldenrod;'>alert</b>("],
      ["Object.assign[(]",
        [
          "<b style='color: blueviolet;'>Object</b>",
          ".",
          "<b style='color: darkgoldenrod;'>assign</b>("
        ].join("")
      ],
      ["[\u262F]", ""]
    ]
  ],

  commentedOutHtmlWrap: function (s, skipBreak) {
    if (skipBreak) {
        return "<i style='color: teal;'>".concat(s, "</i>");
    }
    return "<i style='color: teal;'>".concat(s, "</i><br />");
  },

  formatLine: function (formatId, line, skipBreak) {
    let formats = DiepSrcCode.FORMATS[formatId];
    for (let j = 0; j < formats.length; j++) {
        let format = formats[j];
        let regExp = new RegExp(format[0], 'g');
        line = line.replace(regExp, format[1])
    }
    if (skipBreak) {
        return line;
    }
    return line.concat("<br />");
  },

  processCommentedOut: function (line, formatId) {
    let idx = line.indexOf("//");
    if (idx >= 0) {
        let html =
          DiepSrcCode.formatLine(formatId, line.substring(0, idx), true);
        html = html.concat(
          DiepSrcCode.commentedOutHtmlWrap(line.substring(idx, line.length))
        );
        return [true, html];
    }
    idx = line.indexOf("/*");
    if (idx >= 0) {
        let html =
          DiepSrcCode.formatLine(formatId, line.substring(0, idx), true);
        html = html.concat(
          DiepSrcCode.commentedOutHtmlWrap(line.substring(idx, line.length))
        );
        return [false, html];;
    }
    return null;
  },

  detectCommentedOutClose: function (line, formatId) {
      let idx = line.indexOf("*/");
      if (idx >= 0) {
          idx += 2;
          let html =
            DiepSrcCode.commentedOutHtmlWrap(line.substring(0, idx), true);
          html = html.concat(
            DiepSrcCode.formatLine(formatId, line.substring(idx, line.length))
          );
          return [false, html];
      }
      return [true, DiepSrcCode.commentedOutHtmlWrap(line)];
  },

  escapeJSX: function (txtId) {
    let txtComp = document.getElementById(txtId);
    if (txtComp !== null) {
      let str = txtComp.value.toString();
      let regExp = new RegExp("[<]", 'g');
      str = str.replace(regExp, "&lt;");
      regExp = new RegExp("[>]", 'g');
      str = str.replace(regExp, "&gt;");
      txtComp.value = str;
    }
  },

  fillCFamilySourceCode: function (txtId, formatId) {
    // parse and convert source code
    let html = "";
    let txtComp = document.getElementById(txtId);
    let onCommentedOut = false;
    if (txtComp) {
      let lines = txtComp.value.split(/\r?\n/);
      for (let i = 0; i < lines.length; i++) {
          let line = lines[i];
          if (onCommentedOut) {
              let detect = DiepSrcCode.detectCommentedOutClose(line, formatId);
              onCommentedOut = detect[0];
              html = html.concat(detect[1]);
              continue;
          }
          let commentedOut = DiepSrcCode.processCommentedOut(line, formatId);
          if (commentedOut == null) {
              html = html.concat(DiepSrcCode.formatLine(formatId, line));
          }
          else {
              if (commentedOut[0]) {
                  html = html.concat(commentedOut[1]);
              }
              else {
                  html = html.concat(commentedOut[1]);
                  onCommentedOut = true;
              }
          }
      }

      // apply converted source code to target div
      let divElement = document.createElement("DIV");
      divElement.innerHTML = html;
      divElement.className = "txt_sourcecodefont1";
      txtComp.parentNode.insertBefore(divElement, txtComp);
    }
  }
};

let snippets  = document.querySelectorAll('*[id^="jsxsrc:"]');
for (let i = 0; i<snippets.length; i++) {
  let id = snippets[i].id;
  DiepSrcCode.escapeJSX(id);
  DiepSrcCode.fillCFamilySourceCode(id, DiepSrcCode.FORMAT_JS);
}
</script>
</div>

