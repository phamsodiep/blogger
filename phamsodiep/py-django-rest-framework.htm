import React from 'react';
import { def, Sect, U, S, D, Figure } from './typo.js';
import { M } from './math.js';


export const FigureList = {
  architectureDiagram : [
    "Django Rest framework architecture diagram",
    "https://1.bp.blogspot.com/-ZySZXc0yKjc/Xrqmmcy0wJI/AAAAAAAAATQ/_7b_4kAHnpktF3l_rIjp6J5GwpN0T18mACNcBGAsYHQ/s1600/Architecture.png",
    [
      [829, 341, -10, 833, null]
    ]
  ],
  configurationDiagram : [
    "Django Rest framework configuration diagram",
    "https://1.bp.blogspot.com/-XxYk7rli8_0/XrvJUiMfyzI/AAAAAAAAAT0/pme2U31UuWkCbuQSTmP0gBpSmNkza19FwCNcBGAsYHQ/s1600/Configuration.png",
    [
      [802, 581, -30, 806, null]
    ]
  ],
};

/*const FormalLanguage = def(
  "formal language",
  "https://huyj2ee.blogspot.com/2020/06/cs-formal-language.html",
  ""
);*/

//const Term = def("terminal symbol", "#", null);

export const ARTICLE = (
<React.Fragment>


<U h="Architecture" tag="h2">
    <S><U h="Concepts" tag="h3">
        <S><U h="Web resources" tag="h4">
            <S>
                Web resource is any identifiable thing.
            </S>
            <S><U sub="b">
                <S>
                    Uniform Resource Identifier (URI): a string of characters that unambiguously identifies a particular resource
                </S>
                <S>
                    Uniform Resource Locator (URL): a specific form of URI based on https or http. (REST apis use URL to identify web resource.)
                </S>
            </U></S>
        </U></S>
        <S><U h="REST api" tag="h4">
            <S>
                Web services that conform to the REST architectural style. They allow the requesting systems to access and manipulate textual representations of Web resources by using a uniform and predefined set of stateless operations.
            </S>
        </U></S>
        <S><U h='ViewSet and "Resource service"' tag="h4">
            <S>
                "Resource Service" is my introduced term for this share blog entry. It represents a REST api implementation for a C.R.U.D. access to resource. (C.R.U.D.: create or read or update or delete operation.)
            </S>
            <S><U sub="b">
                <S>
                    "Access Function" is my introduced term for this share blog entry. It implements "Resource Service" as function.
                </S>
                <S>
                    ViewSet (Django Rest framework term) represents REST apis implementation for C.R.U.D. accesses to resource.
                </S>
            </U></S>
        </U></S>
        <S><U h="Serializer" tag="h4">
            <S>
                Class is implemented to convert data between Web (browser) or
                Api client (REST client) with plain Python object (JSON â†”
                Python object converter).
            </S>
        </U></S>
        <S><U h="Model" tag="h4">
            <S>
                Class is implemented to persist plain Python object to database.
            </S>
        </U></S>
    </U></S>

    <S><U h="Architecture" tag="h3">
        <S>
            Django Rest framework architecture is portrayed by below diagram:
        </S>
        <S>
            <Figure id="architectureDiagram" />
        </S>
    </U></S>
</U>

<U h="Configuration" tag="h2">
    <S><U h="Setup development environment" tag="h3">
        <S><U h="Prerequisites" tag="h4">
            <S><U sub="b">
                <S>
                    django
                </S>
                <S>
                    django-rest-framework
                </S>
            </U></S>
        </U></S>
        <S><U h="Download source code" tag="h4">
            <S><U sub="b">
                <S>
                    <dfn>django</dfn>:&nbsp;
                    <M>"c:\Program Files\Git\mingw32\bin\curl.exe"
                    https://codeload.github.com/django/django/zip/master
                    -o django.zip</M>
                </S>
                <S>
                    <dfn>django-rest-framework</dfn>:&nbsp;
                    <M>"c:\Program Files\Git\mingw32\bin\curl.exe"
                    https://codeload.github.com/encode/django-rest-framework/zip/master
                    -o django-rest-framework.zip</M>
                </S>
            </U></S>
        </U></S>
        <S><U h="Install" tag="h4">
            <S><U sub="b">
                <S>
                    <dfn>django</dfn>:
                </S>
                <S><U sub="t">
                    <S math>c:\Java\jdk1.8.0_241\bin\jar.exe xf django.zip</S>
                    <S math>del django.zip</S>
                    <S math>c:\Users\Guest\mybin>cd django-master</S>
                    <S math>c:\Python38\python.exe setup.py build</S>
                    <S math>c:\Python38\python.exe setup.py install --user</S>
                </U></S>
                <S>
                    <dfn>django-rest-framework</dfn>:
                </S>
                <S><U sub="t">
                    <S math>c:\Java\jdk1.8.0_241\bin\jar.exe xf django-rest-framework.zip</S>
                    <S math>del django-rest-framework.zip</S>
                    <S math>c:\Users\Guest\mybin>cd django-rest-framework-master</S>
                    <S math>c:\Python38\python.exe setup.py build</S>
                    <S math>c:\Python38\python.exe setup.py install --user</S>
                </U></S>
            </U></S>
        </U></S>
    </U></S>
    <S><U h="Create project and app" tag="h3">
        <S><U h="Create project" tag="h4">
            <S math>
                c:\Users\Guest\myws>c:\Python38\python.exe
                c:\Users\Guest\mybin\django-master\django\bin\django-admin.py
                startproject django_rest_api_howto .
            </S>
        </U></S>
        <S><U h="Create app" tag="h4">
            <S math>
                c:\Users\Guest\myws>c:\Python38\python.exe manage.py
                startapp tasklogs
            </S>
        </U></S>
    </U></S>
    <S><U h="Configuration setting" tag="h3">
        <S><U h="Configuration loading process" tag="h4">
            <S><U sub="b">
                <S>
                    Configuration is programmed in <M>settings.py</M> and&nbsp;
                    <M>urls.py</M>.
                </S>
                <S>
                    The loading process is portrayed by below diagram:
                    <Figure id="configurationDiagram" />
                </S>
            </U></S>
        </U></S>
        <S><U h="Configuration setting" tag="h4">
            <S>
                Notice descriptions of figure 4.1:
                <i>Django Rest framework configuration diagram</i> for setting
                values, program the values into
                files: <M>settings.py</M> and <M>urls.py</M>.
            </S>
            <S><U sub="b">
                <S>
                  <M>settings.py</M>:
                </S>
                <S><U sub="s">
                    <S math>INSTALLED_APPS = [</S>
                    <S><U sub="t">
                        <S math>    ...</S>
                        <S math>    'rest_framework',</S>
                        <S math>    'tasklogs.apps.TasklogsConfig'</S>
                    </U></S>
                    <S math>]</S>
                </U></S>
                <S>
                  <M>urls.py</M>:
                </S>
                <S><U sub="s">
                    <S math>from django.contrib import admin</S>
                    <S math>from django.urls import path, include</S>
                    <S math>from tasklogs import views</S>
                    <S math>from rest_framework import routers</S>
                    <S math></S>
                    <S math>router=routers.DefaultRouter()</S>
                    <S math>router.register(r'tasklog', views.TasklogViewSet)</S>
                    <S math></S>
                    <S math>urlpatterns = [</S>
                        <S math>&nbsp;&nbsp;&nbsp;&nbsp;path('', include(router.urls)),</S>
                        <S math>&nbsp;&nbsp;&nbsp;&nbsp;path('api-auth/',include('rest_framework.urls', namespace='rest_framework'))</S>
                    <S math>]</S>
                </U></S>
            </U></S>
        </U></S>
    </U></S>
    <S><U h="Create or update database" tag="h3">
        <S><U h="Create model" tag="h4">
            <S>
                Please consult
                sub-sections <Sect to="sec_3.3">3.3. Create model</Sect>,&nbsp;
                <Sect to="sec_3.4">3.4. Implement serializer</Sect>,&nbsp;
                <Sect to="sec_3.5">3.5. Implement ViewSet</Sect> of section
                3. Implement a simple api for detail.
            </S>
        </U></S>
        <S><U h="Create table tasklogs" tag="h4">
            <S math>c:\Python38\python.exe manage.py makemigrations tasklogs</S>
        </U></S>
        <S><U h="Migrate" tag="h4">
            <S math>c:\Python38\python.exe manage.py migrate</S>
        </U></S>
        <S><U h="Create user for REST api authentication" tag="h4">
            <S math>
                c:\Python38\python.exe manage.py createsuperuser
                --email admin@example.com --username admin
            </S>
        </U></S>
    </U></S>
</U>
<U h="Implement a simple api" tag="h2">
    <S><U h="Create project and app" tag="h3">
        <S>
            Please reference to sub-section <Sect to="sec_2.2" /> of
            section 2. Configuration for details.
        </S>
    </U></S>
    <S><U h="Program configuration settings" tag="h3">
        <S>
            Please reference to sub-section <Sect to="sec_2.3" /> of
            section 2. Configuration for details.
        </S>
    </U></S>
    <S><U h="Create model" tag="h3">
        <S><dfn>models.py</dfn>:</S>
        <S><U sub="t">
            <S math>from django.db import models</S>
            <S math></S>
            <S math># Create your models here.</S>
            <S math>class Tasklog(models.Model):</S>
                <S math>&nbsp;&nbsp;&nbsp;&nbsp;created = models.DateTimeField(auto_now_add=True)</S>
                <S math>&nbsp;&nbsp;&nbsp;&nbsp;log = models.TextField()</S>
                <S math></S>
                <S math>&nbsp;&nbsp;&nbsp;&nbsp;class Meta:</S>
                <S math>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordering = ['created']</S>
        </U></S>
    </U></S>
    <S><U h="Implement serializer" tag="h3">
        <S><dfn>serializers.py</dfn>:</S>
        <S><U sub="t">
            <S math>from tasklogs.models import Tasklog</S>
            <S math>from rest_framework import serializers</S>
            <S math></S>
            <S math>class TasklogSerializer(serializers.HyperlinkedModelSerializer):</S>
            <S math>&nbsp;&nbsp;&nbsp;&nbsp;class Meta:</S>
            <S math>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = Tasklog</S>
            <S math>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fields = ['id', 'log']</S>
        </U></S>
    </U></S>
    <S><U h="Implement ViewSet" tag="h3">
        <S><dfn>views.py</dfn>:</S>
        <S><U sub="t">
            <S math>from django.shortcuts import render</S>
            <S math>from rest_framework import viewsets</S>
            <S math>from tasklogs.models import Tasklog</S>
            <S math>from tasklogs.serializers import TasklogSerializer</S>
            <S math>from rest_framework import permissions</S>
            <S math>from django.http import HttpResponse, JsonResponse</S>
            <S math>from rest_framework.parsers import JSONParser</S>
            <S math></S>
            <S math># Create your views here.</S>
            <S math>class TasklogViewSet(viewsets.ModelViewSet):</S>
            <S math>&nbsp;&nbsp;&nbsp;&nbsp;"""</S>
            <S math>&nbsp;&nbsp;&nbsp;&nbsp;API endpoint that allows users to be viewed or edited.</S>
            <S math>&nbsp;&nbsp;&nbsp;&nbsp;"""</S>
            <S math>&nbsp;&nbsp;&nbsp;&nbsp;queryset = Tasklog.objects.all()</S>
            <S math>&nbsp;&nbsp;&nbsp;&nbsp;serializer_class = TasklogSerializer</S>
            <S math>&nbsp;&nbsp;&nbsp;&nbsp;permission_classes = [permissions.IsAuthenticated]</S>
        </U></S>
    </U></S>
    <S><U h="Prepare database" tag="h3">
        <S>
            Reference to sub-section <Sect to="sec_2.4"/> of
            section 2. Configuration for details.
        </S>
    </U></S>
</U>

<U h="Test with curl" tag="h2">
    <S><U h="Start REST server" tag="h3">
        <S math>
            c:\Python38\python.exe manage.py runserver
        </S>
    </U></S>
    <S><U h="Create a tasklog" tag="h3">
        <S><U h="Create a json file store new tasklog" tag="h4">
            <S math>
                copy con newtask.json
            </S>
            <S math>
                {`{"log": "Setting development environment"} ^Z`}
            </S>
        </U></S>
        <S><U h="Request to create this new tasklog via POST method" tag="h4">
            <S math>
                "c:\Program Files\Git\mingw32\bin\curl.exe" -X POST -H
                "Content-Type: application/json" -u admin:nonepassword
                -d @newtask.json http://127.0.0.1:8000/tasklog/
            </S>
        </U></S>
    </U></S>
    <S><U h="List all tasklog" tag="h3">
        <S math>
            "c:\Program Files\Git\mingw32\bin\curl.exe"
            -H "Accept: application/json; indent=4"
            -u admin:nonepassword http://127.0.0.1:8000/tasklog/
        </S>
    </U></S>
    <S><U h="Delete tasklog" tag="h3">
        <S>
            To delete a tasklog with id = 1.
        </S>
        <S math>
            "c:\Program Files\Git\mingw32\bin\curl.exe" -X DELETE
            -H "Content-Type: application/json"
            -u admin:nonepassword http://127.0.0.1:8000/tasklog/1/
        </S>
    </U></S>
    <S><U h="Update tasklog" tag="h3">
        <S>
            To update tasklog with id = 2 with new log content is
            "I change my mind":
        </S>
        <S><U sub="b">
            <S>
                Create a json file store new tasklog:
            </S>
            <S><U sub="t">
                <S math>
                    copy con updatedtask.json
                </S>
                <S math>
                    {`{"log": "I change my mind"} ^Z`}
                </S>
            </U></S>
        </U></S>
        <S><U sub="b">
            <S>
                Request to update this new tasklog via PUT method:
            </S>
            <S><U sub="t">
                <S math>
                    "c:\Program Files\Git\mingw32\bin\curl.exe" -X PUT
                    -H "Content-Type: application/json"
                    -u admin:nonepassword -d @updatedtask.json
                    http://127.0.0.1:8000/tasklog/2/
                </S>
            </U></S>
        </U></S>
    </U></S>
</U>






















<U h="Test with React" tag="h2">
    <S><U h="Create and implement React test project" tag="h3">
        <S>
            Please consult blog entry <i>[Js][Jsx] React in a nutshell</i> for
            details.
        </S>
    </U></S>
    <S><U h="Export React test project as static html files" tag="h3">
        <S>
            To export React test project as static html files which could be
            hosted at http://127.0.0.1:8000/static:
        </S>
        <S><U sub="b">
            <S>
                Update file <i>package.json</i> of React project add
                property <i>homepage</i>:
            </S>
            <S><U sub="t">
                <S math>{`{`}</S>
                <S math>&nbsp;&nbsp;&nbsp;&nbsp;...</S>
                <S math>&nbsp;&nbsp;&nbsp;&nbsp;"homepage": "/static",</S>
                <S math>&nbsp;&nbsp;&nbsp;&nbsp;...</S>
                <S math>{`}`}</S>
            </U></S>
            <S>
                Launch command to export static html files:
            </S>
            <S><U sub="t">
                <S math>npm run build</S>
            </U></S>
            <S><U sub="rb">
                <S>
                    The exported files is located in folder <i>build</i>.
                </S>
            </U></S>
        </U></S>
    </U></S>
    <S><U h="Import React static html files" tag="h3">
        <S>
            To import React static html files to <i>Django development
            server</i>:
        </S>
        <S><U sub="b">
            <S>
                Open file <i>settings.py</i>, configure <i>Django development
                server</i> input static html files source folder and
                destination store source folder:
            </S>
            <S><U sub="t">
                <S math>STATIC_URL = '/static/'</S>
                <S math>STATIC_ROOT = "c:\\Users\\Guest\\mygit\\django_howto\\static"</S>
                <S math>STATICFILES_DIRS = ("c:\\Guest\\Guest\\mygit\\django_howto\\tasklogsfrontend\\build",)</S>
            </U></S>
            <S><U sub="rb">
                <S><i>Note:</i></S>
            </U></S>
            <S><U sub="t">
                <S>
                    <dfn>STATIC_URL</dfn>: url prefix to access to these html
                    file resources (the 'directory path' of url). This must
                    matches with property <i>homepage</i> of
                    file <i>package.json</i>.
                </S>
                <S>
                    <dfn>STATIC_ROOT</dfn>: folder to store html file resources.
                </S>
                <S>
                    <dfn>STATICFILES_DIRS</dfn>: folder to import html file
                    resources once collectstatic command is launched.
                </S>
            </U></S>
            <S>
                Invoke below command to import resources to <i>Django
                development server</i>:
            </S>
            <S><U sub="t">
                <S math>python manage.py collectstatic</S>
            </U></S>
        </U></S>
    </U></S>
</U>


</React.Fragment>
);


//https://github.com/phamsodiep/blogger/blob/master/phamsodiep/py-django-rest-framework.htm
//0.1.1
/*
            Django REST framework is a powerful and flexible toolkit for
            building Web APIs. Authentication policies including packages
            for OAuth1a and OAuth2. Serialization that supports both ORM
            and non-ORM data sources. This blog entry shares steps to
            configure, develop simple REST apis.
            <br />
            <br />
            <b>Audience:</b> software engineer with Python 3 programming
            language knowledge -
            <b>Topic:</b> Python REST API programming.
*/