<div id="entry_article">
<details class="hidden">
    <summary>
        <div id="entry_brief_tmp"><em><i>
            Scrum is an agile framework for developing, delivering, and
            sustaining complex products. It is designed for teams of ten or
            fewer members, who break their work into goals that can be
            completed within timeboxed iterations. The Scrum Team track
            progress in 15-minute time-boxed daily meetings. At the end of
            a iteration, the team holds review and retrospective to
            continuously improve.
            <br />
            <b>Audience</b>: software engineer
            â€“ <b>Topic</b>: project management framework
        </i></em></div>
    </summary>
    <p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>
</details>


<div class="naturalsciencefont0">
<!-- DELMEPLEASE --><input id="notyet$" style="display: none;" type="button" value="off" onclick="switchDisplay(this, ['on', 'off']);"/><div style="display: none;" class="notyet$on"><div id="minpage233">&nbsp;</div>
    <div ID=" I. Introduction">
        <h2>I. Introduction</h2>
        <div>
            <b>Disclaimer:</b>
            <i>I am not a professional on this subject, I did not work as a
            Scrum members before this blog entry. I investigate and share my
            opinions, maybe there are some wrong things but this blog entry
            is being refined to be better.</i>
        </div>
        <div class="para_sep0">
            <b>Introduction:</b>
        </div>
        <div>
            <i>"Problems are inevitable, Problems are soluble."</i>, that is
            claimed by
            <a
              target="_blank"
              rel="noopener noreferrer"
              href="https://en.wikipedia.org/wiki/David_Deutsch"
            >
                David Deutsch.
            </a>
            Problems are inevitable, because our knowledge will always be
            infinitely far from complete. Problems are soluble, and each
            particular evil is a problem that can be solved. Let's
            investigate problems and knowledge in some following
            software methodologies.
        </div>
        <div ID=" I.1. Waterfall model" class="para_sep1">
            <div><b>1. Waterfall model</b></div>
            <div>
                <!-- a
                  target="_blank"
                  rel="noopener noreferrer"
                  href="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Waterfall_model.svg/350px-Waterfall_model.svg.png"
                -->
                    <figure id="Waterfall_model.svg.png"/>
                <!-- /a -->
            </div>
            <div>
                <div>
                    For waterfall methodology, software requirements
                    (Figure 1, <i>Requirements</i> of the waterfall model) are
                    analyzed by a Business Analyzer captured in a product
                    requirements document. But problems are inevitable event
                    if Business Analyzer does the best works because:
                </div>
                <div class="lindent0a">
                    Customer incorrectly describes the requirement.
                </div>
                <div class="lindent0a">
                    Business Analyzer incorrectly captures requirement because
                    of complexity nature.
                </div>
                <div class="lindent0a">
                    Team and technology could not implement the requirement as
                    they expect.
                </div>
                <div class="lindent0a">
                    Communication problems cause knowledge sharing is not good.
                    Business Analyzer captures requirement correctly, but team
                    understand incorrectly.
                </div>
                <div class="lindent0a">
                    ... <i>(you could add more from your practice)</i>
                </div>
            </div>
            <div class="para_sep1">
                <div>
                    The more complex requirements, the more potential problems
                    are arisen. The key to solve the problems is knowledge.
                    But what knowledge really is?
                    <a
                      target="_blank"
                      rel="noopener noreferrer"
                      href="https://en.wikipedia.org/wiki/Karl_Popper"
                    >
                        Karl Popper
                    </a>
                    disagrees that knowledge is collection of observations,
                    nor with the invention of experiments. The reason is that
                    observations and experiments are biased. Knowledge is
                    conjecture alternating with criticism. Such knowledge is
                    archived after <i>Verification</i> of the waterfall model
                    (Figure 1). This means that we have knowledge after the
                    product is released. There are two type of knowledge:
                </div>
                <div class="lindent0a">
                    Knowledge about the target implemented system
                </div>
                <div class="lindent0a">
                    Knowledge about the technology implements the system
                </div>
                <div>
                    Waterfall methodology is suitable for case that such
                    knowledge is straightforward (where requirements and scope
                    are fixed, the product itself is firm and stable, and
                    the technology is clearly understood.).
                </div>
            </div>
        </div>
        <div ID=" I.2. Iterative incremental model" class="para_sep1">
            <div><b>2. Iterative incremental model</b></div>
            <div>
                To support team archive knowledge, iterative incremental model
                is introduced. The requirements are broken down and they are
                being evoluted. They are added over iterations. An iteration is
                similar to waterfall model, it releases an outcome called as
                <i>Software Product Increment</i>. The requirements are broken
                down and evoluted so that the knowledge required for the early
                iteration is straightforward. After each iteration, we "earn"
                more knowledge that is ready for next requirement evolution.
                We base on the <i>Software Product Increment</i> to define
                the next <i>Requirements</i> (select which pending requirement
                to put into next iteration implementation list, add new
                requirement or modify an existing requirement).
            </div>
            <div class="para_sep0">
                <figure id="scrum_incremental_model.png" />
            </div>
            <div class="para_sep0">
                The outcome of the subsequent iteration is an enhanced working
                increment of the product. This is repeated till the product
                accomplishes the required functionalities.
            </div>
        </div>
        <!-- div ID=" I.1. a">
            <div><b>1. a</b></div>
        </div -->
    </div>
    <div ID=" II. Agile methodology" class="para_sep2">
        <h2>II. Agile methodology</h2>
        <div ID=" II.1. Introduction">
            <div><b>1. Introduction</b></div>
            <div>
                Iterative incremental model assumes that customer could
                correctly describe the requirement. The requirement is not
                expected to be changed. However, it is common that requirement
                is changed. Agile methodology encourages this. It is based on
                iterative incremental model with below characteristics:
            </div>
            <div class="lindent0a">
                Requirements and solutions evolve through team collaboration.
            </div>
            <div class="lindent0a">
                Time-boxed iterative approach, encourages rapid and flexible
                response to change.
            </div>
        </div>
        <div ID=" II.2. Implemented values" class="para_sep1">
            <div><b>2. Implemented values</b></div>
            <div>
                <div>As the Agile Manifesto:</div>
                <div class="lindent00">
                    <div>
                        "We are uncovering better ways of developing software
                        by doing it and helping others do it. Through this
                        work, we have come to value:
                    </div>
                    <div class="lindent0a">
                        Individuals and interactions over processes and tools
                    </div>
                    <div class="lindent0a">
                        Working software over comprehensive documentation
                    </div>
                    <div class="lindent0a">
                        Customer collaboration over contract negotiation
                    </div>
                    <div class="lindent0a">
                        Responding to change over following a plan
                    </div>
                    <div>
                        That is, while there is value in the items on the
                        right, we value the items on the left more."
                    </div>
                </div>
                <div>
                    <i>
                        Manifesto for Agile Software Development, Authors:
                        Beck, Kent, et al. (2001)
                    </i>
                </div>
                <div class="para_sep0">
                    <div>
                        The implemented values are: individuals and
                        interactions, working software, customer collaboration,
                        responding to change. Detail descriptions is as below.
                    </div>
                    <div class="lindent0a">
                        <i>Individuals and interactions:</i>
                        self-organization, self-motivation of the team members
                        and continuous interaction for work, clarifications,
                        information among the team members.
                    </div>
                    <div class="lindent0a">
                        <i>Working software:</i>
                        delivery of working software at short duration
                        intervals helps gain customer trust and assurance in
                        the team.
                    </div>
                    <div class="lindent0a">
                        <i>Customer collaboration:</i>
                        constant involvement of customer with the development
                        team ensures communication of necessary modifications.
                    </div>
                    <div class="lindent0a">
                        <i>Responding to change:</i>
                        focus on quick response to the proposed changes, which
                        is made possible with short duration iterations.
                    </div>
                </div>
                <div class="para_sep0">
                    <i>The key element of Agile Manifesto is that we must
                    trust people and their ability to collaborate.</i>
                </div>
            </div>
        </div>
        <div ID=" II.3. Principles" class="para_sep1">
            <div><b>3. Principles</b></div>
            <div>
                <div>
                    The Agile Manifesto is based on the following principles:
                </div>
                <div class="lindent0a">
                    <i>Satisfaction and Delivery:</i>
                    customer satisfaction through early and continuous working
                    software.
                </div>
                <div class="lindent0a">
                    <i>Welcoming Change:</i>
                    welcome changing requirements, even at later stages of
                    development.
                </div>
                <div class="lindent0a">
                    <i>Deliver Frequently:</i>
                    deliver working software frequently (weekly rather than
                    monthly).
                </div>
                <div class="lindent0a">
                    <i>Communication is the Key:</i>
                    ensure close association of developers with business people
                    on daily basis.
                </div>
                <div class="lindent0a">
                    <i>Environment and Trust:</i>
                    build projects around motivated individuals. Give them
                    necessary support and trust them.
                </div>
                <div class="lindent0a">
                    <i>Face-to-face Communication:</i>
                    encourage face-to-face conversation to ensure efficient
                    and effective communication.
                </div>
                <div class="lindent0a">
                    <i>Software as Measure of Progress:</i>
                    working software is the primary measure of progress.
                </div>
                <div class="lindent0a">
                    <i>Sustainable Development:</i>
                    promote sustainable development with the ability to
                    maintain a constant pace throughout the development.
                </div>
                <div class="lindent0a">
                    <i>Attention to Details:</i>
                    continuous attention to technical excellence and good
                    design.
                </div>
                <div class="lindent0a">
                    <i>The Power of Less:</i>
                    simplicity is essential.
                </div>
                <div class="lindent0a">
                    <i>Self-organizing Teams:</i>
                    regular attention of the team on becoming effective in
                    changing circumstances.
                </div>
            </div>
        </div>
        <div ID=" II.4. How this works" class="para_sep1">
            <div><b>4. How this works</b></div>
            <div>
                <div>
                    Base on the characteristics of Agile methodology, its
                    benefits are:
                </div>
                <div class="lindent00">
                    1. Faster Time to Deliver/ Market
                </div>
                <div class="lindent00">
                    2. Reduce Uncertainty and Risk
                </div>
                <div class="lindent00">
                    3. Increase Return on Investment (ROI) by focusing on
                    Customer Value
                </div>
                <div>
                    We shall analyze how these benefits are archived.
                </div>
            </div>
            <div class="para_sep0">
                <div>
                    <b>Concepts</b>
                </div>
                <div class="lindent0a">
                    <i>Paradigm</i>:
                    <a
                      target="_blank"
                      rel="noopener noreferrer"
                      href="https://en.wikipedia.org/wiki/Paradigm"
                    >
                        paradigm
                    </a>
                    is a distinct set of concepts or thought patterns,
                    including theories, research methods, postulates, and
                    standards for what constitutes legitimate contributions
                    to a field.
                </div>
                <div class="lindent0a">
                    <i>Methodology</i>:
                    <a
                      target="_blank"
                      rel="noopener noreferrer"
                      href="https://en.wikipedia.org/wiki/Methodology"
                    >
                        methodology
                    </a>
                    is the systematic, theoretical analysis of the methods
                    applied to a field of study.
                </div>
                <div class="lindent0a">
                    <i>Framework</i>:
                    framework is a partial solution for a problem that the
                    solution could be customized or filled in to complete it.
                    The framework solves a class of problems, it need
                    customization or fill for a specific problem. 
                </div>
            </div>
            <div class="para_sep0">
                <div>
                    <b>Paradigm</b>
                </div>
                <div>
                    To archive target benefits, the Agile methodology proposes:
                </div>
                <div class="lindent00">
                    1. Let product evolute
                </div>
                <div class="lindent00">
                    2. Let team's knowledge evolve
                </div>
                <div class="lindent00">
                    3. Let customer join the development team and let they
                    learn more knowledge about the implemented system so
                    that they could change their requirement which affect
                    on #1.
                </div>
                <div>
                    The paradigm for #1 is dialectical materialism and for #2,
                    #3 is knowledge evolution (David Deutsch). For optimization,
                    Synergy also is applied.
                </div>
            </div>
            <div class="para_sep0">
                <div>
                    <b>Methodology</b>
                </div>
                <div>
                    We shall analyze how paradigm is applied to propose
                    methodology principles.
                </div>
                <div>
                    Software product is implemented for customer business
                    values. Because of value additivity nature, we could
                    partition the software product into software product
                    incremental so that the early values archivement is
                    meanfull to customer for principle
                    <i>Satisfaction and Delivery</i>. The software product
                    incremental is so small for <i>Deliver Frequently</i>, 
                    <i>The Power of Less</i> and
                    <i>Sustainable Development</i> principles.
                    <i>Welcoming Change</i> principle could be archived by
                    view change as software product incremental.
                    With time-boxed iterative approach, a software product
                    incremental could be treated as a granular for measurement,
                    so principle <i>Software as Measure of Progress</i>
                    could be archived.
                </div>
                <div>
                    These implement the benefit
                    <i>#1. Faster Time to Deliver/ Market.</i>
                    The <i>The Power of Less</i> principle implement the
                    benefit <i>#2. Reduce Uncertainty and Risk.</i>
                    By welcoming change, we focus on
                    customer value rather than requirements for benefit
                    <i>#3. Increase Return on Investment (ROI) by
                    focusing on Customer Value.</i> This could be implemented
                    if both customer and team members aware about the values
                    and requirements.
                </div>
                <div>
                    We need a solution to implement knowledge sharing and to
                    maximize each member potential skill (Syngegy approach).
                    This results in following principles:
                    <i>Self-organizing Teams</i>, <i>Communication is the Key</i>,
                    <i>Environment and Trust</i>, <i>Face-to-face Communication</i>,
                    <i>Attention to Details</i>
                </div>
            </div>
        </div>
        <!-- div ID=" II.5. a" class="para_sep1">
            <div><b>5. I</b></div>
        </div -->
    </div>
    <div ID=" III. Scrum framework in a nutshell" class="para_sep2">
        <h2>III. Scrum framework in a nutshell</h2>
        <div ID=" III.1. a">
            <div><b>1. a</b></div>
        </div>
    </div>
    <div ID=" IV. Scrum framework in a nutshell" class="para_sep2">
        <h2>IV. Scrum framework in a nutshell</h2>
        <div>
            <div>
                https://www.tutorialspoint.com/scrum/scrum_overview.htm
            </div>
        </div>
    </div>
    <!--  div ID=" II. B" class="para_sep2">
        <h2>II. B</h2>
        <div ID=" II.1. a">
            <div><b>1. a</b></div>
        </div>
    </div -->
<!-- DELMEPLEASE --></div>
</div>


<div id="githubsrc" class="hidden">Source: https://github.com/phamsodiep/blogger/blob/master/huyj2ee/se-scrum.htm</div>
<div id="githubver" class="hidden">0.2.0</div>
<script>doDefaultDecorate();doScrollIntoViewDecoration();</script>
</div>


<script>
function fillFigure(
  elemId,
  imgSrc,
  orgW,
  height,
  leftAdj,
  clippedW,
  scrollClass,
  figId,
  figCaption
) {
  let elem = document.getElementById(elemId);
  if (!(elem !== null && typeof elem.innerHTML === "string")) {
    return false;
  }
  let ww = orgW;
  let hh = height;
  let scrollDiv =
    typeof scrollClass === "string" ?
    `<div class="${scrollClass}">`:
    "<div>";
  let figCap = typeof figCaption === "string" ?
    `<i>${figCaption}</i>` : "";
  let figcaption = "";
  if (typeof figId === "string") {
    figcaption = `<figcaption><b>Figure</b> ${figId}: ${figCap}</figcaption>`;
  }
  elem.innerHTML = `
    <div style="position: relative; left: ${leftAdj}px; width: ${clippedW}px;">
        ${scrollDiv}
            <div style="width:${ww}px;">
                <img
                  border="0"
                  data-original-height="${height}"
                  data-original-width="${orgW}"
                  height="${height}
                  width="${orgW}"
                  src="${imgSrc}"
                />
            </div>
        </div>
        <div style="text-align: center" class="para_sep0">${figcaption}</div>
    </div>
  `;
  return true;
}

fillFigure(
    "Waterfall_model.svg.png",
    [
      "https://1.bp.blogspot.com/-0-XzDih9BUI/XtOZ-kKPa9I/AAAAAAAAAU0/cNkQYPk",
      "MYNUT412Tgksv4QU7iFiqFUiIACK4BGAsYHg/d/350px-Waterfall_model.svg.png"
    ].join(""),
    350,
    263,
    180,
    350,
    null,
    "1",
    "The unmodified \"waterfall model\""
);
fillFigure(
    "scrum_incremental_model.png",
    [
      "https://1.bp.blogspot.com/-SbxF8wkLn_s/XtO87ouc1hI/AAAAAAAAAVQ/OakRII4",
      "JWgQdtTTaAoOAKiIZHWF_JBQYACK4BGAsYHg/d/scrum_incremental_model.png"
    ].join(""),
    600,
    325,
    74,
    600,
    null,
    "2",
    "Iterative Incremental Model"
);
</script>