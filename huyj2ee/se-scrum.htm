<div id="entry_article">
<details class="hidden">
    <summary>
        <div id="entry_brief_tmp"><em><i>
            Scrum is an agile framework for developing, delivering, and
            sustaining complex products. It is designed for teams of ten or
            fewer members, who break their work into goals that can be
            completed within timeboxed iterations. The Scrum Team track
            progress in 15-minute time-boxed daily meetings. At the end of
            a iteration, the team holds review and retrospective to
            continuously improve.
            <br />
            <b>Audience</b>: software engineer
            â€“ <b>Topic</b>: project management framework
        </i></em></div>
    </summary>
    <p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>
</details>


<div class="naturalsciencefont0">
<!-- DELMEPLEASE --><input id="notyet$" style="display: none;" type="button" value="off" onclick="switchDisplay(this, ['on', 'off']);"/><div style="display: none;" class="notyet$on"><div id="minpage233">&nbsp;</div>
    <div ID=" I. Introduction">
        <h2>I. Introduction</h2>
        <div>
            <i>"Problems are inevitable, Problems are soluble."</i>, that is
            claimed by
            <a
              target="_blank"
              rel="noopener noreferrer"
              href="https://en.wikipedia.org/wiki/David_Deutsch"
            >
                David Deutsch.
            </a>
            Problems are inevitable, because our knowledge will always be
            infinitely far from complete. Problems are soluble, and each
            particular evil is a problem that can be solved. Let's
            investigate problems and knowledge in some following
            software methodologies.
        </div>
        <div ID=" I.1. Waterfall model" class="para_sep1">
            <div><b>1. Waterfall model</b></div>
            <div>
                <!-- a
                  target="_blank"
                  rel="noopener noreferrer"
                  href="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e2/Waterfall_model.svg/350px-Waterfall_model.svg.png"
                -->
                    <figure id="Waterfall_model.svg.png"/>
                <!-- /a -->
            </div>
            <div>
                <div>
                    For waterfall methodology, software requirements
                    (Figure 1, <i>Requirements</i> of the waterfall model) are
                    analyzed by a Business Analyzer captured in a product
                    requirements document. But problems are inevitable event
                    if Business Analyzer does the best works because:
                </div>
                <div class="lindent0a">
                    Customer incorrectly describes the requirement.
                </div>
                <div class="lindent0a">
                    Business Analyzer incorrectly captures requirement because
                    of complexity nature.
                </div>
                <div class="lindent0a">
                    Team and technology could not implement the requirement as
                    they expect.
                </div>
                <div class="lindent0a">
                    Communication problems cause knowledge sharing is not good.
                    Business Analyzer captures requirement correctly, but team
                    understand incorrectly.
                </div>
                <div class="lindent0a">
                    ... <i>(you could add more from your practice)</i>
                </div>
            </div>
            <div class="para_sep1">
                <div>
                    The more complex requirements, the more potential problems
                    are arisen. The key to solve the problems is knowledge.
                    But what knowledge really is?
                    <a
                      target="_blank"
                      rel="noopener noreferrer"
                      href="https://en.wikipedia.org/wiki/Karl_Popper"
                    >
                        Karl Popper
                    </a>
                    disagrees that knowledge is collection of observations,
                    nor with the invention of experiments. The reason is that
                    observations and experiments are biased. Knowledge is
                    conjecture alternating with criticism. Such knowledge is
                    archived after <i>Verification</i> of the waterfall model
                    (Figure 1). This means that we have knowledge after the
                    product is released. There are two type of knowledge:
                </div>
                <div class="lindent0a">
                    Knowledge about the target implemented system
                </div>
                <div class="lindent0a">
                    Knowledge about the technology implements the system
                </div>
                <div>
                    Waterfall methodology is suitable for case that such
                    knowledge is straightforward (where requirements and scope
                    are fixed, the product itself is firm and stable, and
                    the technology is clearly understood.).
                </div>
            </div>
        </div>
        <div ID=" I.2. Iterative incremental model" class="para_sep1">
            <div><b>2. Iterative incremental model</b></div>
            <div>
                To support team archive knowledge, iterative incremental model
                is introduced. The requirements are broken down and they are
                being evoluted. They are added over iterations. An iteration is
                similar to waterfall model, it releases an outcome called as
                <i>Software Product Increment</i>. The requirements are broken
                down and evoluted so that the knowledge required for the early
                iteration is straightforward. After each iteration, we "earn"
                more knowledge that is ready for next requirement evolution.
                We base on the <i>Software Product Increment</i> to define
                the next <i>Requirements</i> (select which pending requirement
                to put into next iteration implementation list, add new
                requirement or modify an existing requirement).
            </div>
            <div class="para_sep0">
                <figure id="scrum_incremental_model.png" />
            </div>
            <div class="para_sep0">
                The outcome of the subsequent iteration is an enhanced working
                increment of the product. This is repeated till the product
                accomplishes the required functionalities.
            </div>
        </div>
        <!-- div ID=" I.1. a">
            <div><b>1. a</b></div>
        </div -->
    </div>
    <div ID=" II. Agile methodology" class="para_sep2">
        <h2>II. Agile methodology</h2>
        <div ID=" II.1. a">
            <div><b>1. a</b></div>
        </div>
    </div>
    <div ID=" II. Scrum framework in a nutshell" class="para_sep2">
        <h2>II. Scrum framework in a nutshell</h2>
        <div ID=" II.1. a">
            <div><b>1. a</b></div>
        </div>
    </div>
    <div ID=" II. Scrum framework in a nutshell" class="para_sep2">
        <h2>II. Scrum framework in a nutshell</h2>
        <div>
            <div>
                https://www.tutorialspoint.com/scrum/scrum_overview.htm
            </div>
        </div>
    </div>
    <!--  div ID=" II. B" class="para_sep2">
        <h2>II. B</h2>
        <div ID=" II.1. a">
            <div><b>1. a</b></div>
        </div>
    </div -->
<!-- DELMEPLEASE --></div>
</div>


<div id="githubsrc" class="hidden">Source: https://github.com/phamsodiep/blogger/blob/master/huyj2ee/se-scrum.htm</div>
<div id="githubver" class="hidden">0.1.0</div>
<script>doDefaultDecorate();doScrollIntoViewDecoration();</script>
</div>


<script>
function fillFigure(
  elemId,
  imgSrc,
  orgW,
  height,
  leftAdj,
  clippedW,
  scrollClass,
  figId,
  figCaption
) {
  let elem = document.getElementById(elemId);
  if (!(elem !== null && typeof elem.innerHTML === "string")) {
    return false;
  }
  let ww = orgW;
  let hh = height;
  let scrollDiv =
    typeof scrollClass === "string" ?
    `<div class="${scrollClass}">`:
    "<div>";
  let figCap = typeof figCaption === "string" ?
    `<i>${figCaption}</i>` : "";
  let figcaption = "";
  if (typeof figId === "string") {
    figcaption = `<figcaption><b>Figure</b> ${figId}: ${figCap}</figcaption>`;
  }
  elem.innerHTML = `
    <div style="position: relative; left: ${leftAdj}px; width: ${clippedW}px;">
        ${scrollDiv}
            <div style="width:${ww}px;">
                <img
                  border="0"
                  data-original-height="${height}"
                  data-original-width="${orgW}"
                  height="${height}
                  width="${orgW}"
                  src="${imgSrc}"
                />
            </div>
        </div>
        <div style="text-align: center" class="para_sep0">${figcaption}</div>
    </div>
  `;
  return true;
}

fillFigure(
    "Waterfall_model.svg.png",
    [
      "https://1.bp.blogspot.com/-0-XzDih9BUI/XtOZ-kKPa9I/AAAAAAAAAU0/cNkQYPk",
      "MYNUT412Tgksv4QU7iFiqFUiIACK4BGAsYHg/d/350px-Waterfall_model.svg.png"
    ].join(""),
    350,
    263,
    180,
    350,
    null,
    "1",
    "The unmodified \"waterfall model\""
);
fillFigure(
    "scrum_incremental_model.png",
    [
      "https://1.bp.blogspot.com/-SbxF8wkLn_s/XtO87ouc1hI/AAAAAAAAAVQ/OakRII4",
      "JWgQdtTTaAoOAKiIZHWF_JBQYACK4BGAsYHg/d/scrum_incremental_model.png"
    ].join(""),
    600,
    325,
    74,
    600,
    null,
    "2",
    "Iterative Incremental Model"
);
</script>