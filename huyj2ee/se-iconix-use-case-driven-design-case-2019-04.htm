<div id="entry_article">
<details class="hidden">
    <summary>
        <img
          border="0"
          data-original-width="1"
          data-original-height="1"
          width="1"
          height="1"
          src="https://1.bp.blogspot.com/-7F7q_2ctN5c/XeY2erXbvdI/AAAAAAAAAMI/19CLaBbK--4Kp5-69kxwMWpv84P0gZ8BQCLcBGAsYHQ/s1600/null.png"
        />
        <div id="entry_brief_tmp"><em><i>
            ICONIX process is UML Use Case driven but more lightweight than RUP.
            This blog entry shares an example of following the process to
            develop Lines 98 game, a simple interesting classical game.
        </i></em></div>
    </summary>
    <p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>
</details>


<div class="naturalsciencefont0">
    <div ID=" I. Game introduction" class="para0">
        <div ID=" I.1. Game introduction" >
            <b>I. Game introduction</b>
        </div>
        <div id="narrative_source">
            <div class="lindent00">
                Lines 98 is a simple interesting classical game. The game is
                composed by balls generated on a board that player could make a
                ball moving. To do scores, player must arrange 5 or more balls
                of the same colour consecutively in straight lines (vertically,
                horizontally or diagonally). The game is started by a page
                load/refresh or a reset button clicked by player. After reseting,
                3 new balls is generated, then player could move a ball. After
                reseting, there are only 3 balls existed, so no scores is done
                after this first ball moving. If there is no scores done after
                a moving ball, 3 new balls is generated, then player could make
                a new ball moving. If this new moving results in 5 or more balls
                of the same colour consecutively are in straight lines, scores
                are done (all balls do score will be removed), and new scores is
                displayed on the score board. In the case of scores done, there
                is no new balls generated, player could make a new ball moving
                then. If player's total scores reach to a preset limitation,
                player wins a price which results in web page will show some
                hidden content that is meaningful to player. The score is
                computed as following:
            </div>
            <div class="lindent00">
                <div class="lindent00">
                    <i>score</i> = <i>n</i> * (<i>n</i> - 4)
                </div>
                <div>
                    where: <i>n</i> is total removed balls count
                </div>
            </div>
            <div ID=" I.2 Interaction Operations"  class="lindent00">
                <div class="para_sep0">
                    Interaction Operations:
                </div>
                <div class="lindent0a">
                    <div><i>Reset Game</i>:</div>
                    <div class="lindent00">
                        1. Player clicks reset button.
                    </div>
                    <div class="lindent00">
                        2. Game application generates three initial balls.
                    </div>
                    <div class="lindent00">
                        3. Game application waits player for a ball move.
                    </div>
                </div>
                <div class="lindent0a">
                    <div><i>Move Ball</i>:</div>
                    <div class="lindent00">
                        1. Player clicks a ball.
                    </div>
                    <div class="lindent00">
                        2. Game application displays clicked ball as
                        focused animation (the ball is moved up then
                        down alliteratively).
                    </div>
                    <div class="lindent00">
                        3. Player clicks a empty cell, that has a path
                        to move ball to.
                    </div>
                    <div class="lindent00">
                        4. Game application displays ball moving by a
                        path that it searches itself.
                    </div>
                    <div class="lindent00">
                    </div>
                    <div>
                        <div><i>Notes</i>:</div>
                        <div class="lindent0a">
                            <i></i>
                        </div>
                    </div>
                </div>
            </div>
            <div ID=" I.3 Ambitious points" class="lindent00">
                <div class="para_sep0">
                    Ambitious points and its clarifying (this could be archived
                    by interview with stake-holders in practice):
                </div>
                <div class="lindent00">
                    <div>
                        <i>Question 1</i>:
                        If there are some straight lines that has 5 or more
                        balls arranged, how scores are done?
                    </div>
                    <div class="lindent00">
                        &#x261E;
                        <i>
                            All of straight lines that has 5 or more balls
                            arranged is scored (all balls in these lines are
                            moved).
                        </i>
                    </div>
                </div>
                <div class="lindent00">
                    <div>
                        <i>Question 2</i>:
                        If new generated balls are arranged one or some straight
                        lines, how scores are done?
                    </div>
                    <div class="lindent00">
                        &#x261E;
                        <i>
                            Process as a ball moving is made, this means that
                            these generated balls are also removed and then let
                            user makes a new ball moving.
                        </i>
                    </div>
                </div>
                <div class="lindent00">
                    <div>
                        <i>Question 3</i>:
                        How to set preset limitation score?
                    </div>
                    <div class="lindent00">
                        &#x261E;
                        <i>
                            The preset limitation score is hard coded in game.
                        </i>
                    </div>
                </div>
                <div class="lindent00">
                    <div>
                        <i>Question 4</i>:
                        How to show the hidden content?
                    </div>
                    <div class="lindent00">
                        &#x261E;
                        <i>
                            The hidden content is hard coded, and should be
                            obfuscated so that player hard to cheat to show them
                            without playing game. Obfuscating content function
                            is out of scope of this game, it will be implemented
                            in another system. This system just need to invoke
                            a java script call back function named onWinPrice.
                            But this call back function will be obfuscated also
                            in the future while integrating with the showing
                            content system.
                        </i>
                    </div>
                </div>
                <div class="lindent00">
                    <div>
                        <i>Question 5</i>:
                        If after generating or moving ball that results in
                        scores done and board is empty because all of remain
                        balls are removed, how to process the game in this case.
                    </div>
                    <div class="lindent00">
                        &#x261E;
                        <i>
                            In such case, player wins a price.
                        </i>
                    </div>
                </div>
                <div class="lindent00">
                    <div>
                        <i>Question 6</i>:
                        How to determine if game is over and how to process
                        for that case.
                    </div>
                    <div class="lindent00">
                        &#x261E;
                        <i>
                            Game is over if ball generating could not be
                            executed or after a ball generating, no new ball
                            move could be conducted. This means that game is
                            over if remains empty cells count of the game board
                            (the cells that have no ball occupied) should be
                            greater than 5 cells.
                        </i>
                    </div>
                    <div class="lindent00">
                        &#x261E;
                        <i>
                            Once game is over, alert a message 'Game is over'
                            and block next ball move.
                        </i>
                    </div>
                </div>
                <div class="lindent00">
                    <div>
                        <i>Question 7</i>:
                        Does reset button need decoration? Should blogger author
                        define reset button location and its appearance.
                    </div>
                    <div class="lindent00">
                        <div>
                            &#x261E;
                            <i>
                                Yes, the css class of reset button should be
                                customized, reset button should be implemented
                                as HTML div tag with a caption, div inner text,
                                is customizable also. Moreover, there are three
                                components whose location is defined by placing
                                component into an existed div tag as its inner
                                tag. They are: reset button, game board and
                                score board. The ids of target div are named as
                                below notes:
                            </i>
                        </div>
                        <div class="lindent0a">
                            <i>
                                Id names are prefixed with 'line98' and this
                                could be customized/changed to avoid id
                                conflict.
                            </i>
                        </div>
                        <div class="lindent0a">
                            <i>
                                Reset button's id is 'line98ResetButton'. The
                                'ResetButton' part of id is fixed, the prefix
                                part 'line98' could be changed.
                            </i>
                        </div>
                        <div class="lindent0a">
                            <i>
                                Game board's id is 'line98EntryPoint'. The
                                'EntryPoint' part of id is fixed, the prefix
                                part 'line98' could be changed.
                            </i>
                        </div>
                        <div class="lindent0a">
                            <i>
                                Score board's id is 'line98ScoreBoard'. The
                                'ScoreBoard' part of id is fixed, the prefix
                                part 'line98' could be changed.
                            </i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div ID=" II. Requirement analyzing" class="para0">
        <div>
            <b>II. Requirement analyzing</b>
            <input
              id="requirement_analyzing$"
              class="view_switch"
              type="button"
              value="content is hidden"
              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
              title="click to show/hide Requirement analyzing content"
            />
        </div>





<div class="requirement_analyzing$content_is_displayed" style="display: none;">





        <div ID=" II.1. Hight-light keywords" class="lindent00">
            <div>
                We begin analyzing by high-lighting requirement narrative key
                words (verbs, terms and adjectives) to identify:
            </div>
            <div class="lindent0a">
                Use cases
            </div>
            <div class="lindent0a">
                Domain objects
            </div>
            <div class="lindent0a">
                Some initial objects attributes and methods.
            </div>
        </div>
        <div class="lindent00">
            <div class="para_sep0">
                This results below high-lighted documents:
            </div>
            <div class="para_sep0">
                <div class="para_box0" id="highlightednarrative">
                </div>
            </div>
        </div>
        <div ID=" II.2. Define keywords" class="lindent00">
            <div class="para_sep0">
                Keywords analyzing for concept grasping (this also needs
                consult from stake-holders in practice):
            </div>
            <div class="lindent0a">
                <div>
                    Terms (nouns):
                </div>
                <div class="lindent0b">
                    <i>Lines 98</i>:
                    Our implemented system, the game application.
                </div>
                <div class="lindent0b">
                    <i>The game</i>:
                    All about the game logic.
                </div>
                <div class="lindent0b">
                    <i>Balls</i>:
                    A game object that player will interactive to move it
                    while playing.
                </div>
                <div class="lindent0b">
                    <i>Board</i>:
                    A game object houses balls.
                </div>
                <div class="lindent0b">
                    <i>Player</i>:
                    An user who is outside the implemented system (Lines 98),
                    interactives with system for playing.
                </div>
                <div class="lindent0b">
                    <i>Straight lines</i>:
                    A game logic that balls are arranged vertically,
                    horizontally or diagonally.
                </div>
                <div class="lindent0b">
                    <i>Page</i>: web page which houses the game application
                    (Lines 98 system).
                </div>
                <div class="lindent0b">
                    <i>Reset button</i>:
                    An HTML GUI button, that player could click to reset the
                    game.
                </div>
                <div class="lindent0b">
                    <i>Scores</i>:
                    Scores of players which are computed as game logic.
                </div>
                <div class="lindent0b">
                    <i>Score board</i>:
                    An HTML GUI interface displays current total scores of
                    players.
                </div>
                <div class="lindent0b">
                    <i>Total scores</i>:
                    All accumulated scores of player.
                </div>
                <div class="lindent0b">
                    <i>Preset limitation</i>:
                    Win price score that if players's total scores excesses this
                    limitation, he/she will wins prices and could view the
                    hidden content.
                </div>
                <div class="lindent0b">
                    <i>Hidden content</i>:
                    A blog content is offucated and not showed after page is
                    loaded. Player needs to play to accumulate a total scores
                    excesses preset limitation to show this content.
                </div>
                <div class="lindent0b">
                    <i>Another system</i>: system implemented to show the
                    hidden content. Because the hidden content is offucated
                    (encoded) so that user could not cheat to show, so this
                    system is need. This is an anonymous term, we could name
                    it as <i>Content Owner</i>.
                </div>
            </div>
            <div class="lindent0a">
                <div>
                    Verbs:
                </div>
                <div class="lindent0b">
                    <i>Generated</i>: behavior that creates new balls
                </div>
                <div class="lindent0b">
                    <i>Balls moving</i>: behavior that moves a balls from cell
                    to cell.
                </div>
                <div class="lindent0b">
                    <i>Do scores</i>: behavior that removes balls and make
                    scores for players following game logic.
                </div>
                <div class="lindent0b">
                    <i>Is started</i>: synonym of reseting
                </div>
                <div class="lindent0b">
                    <i>Load/refresh</i>: HTML browser load or refresh action.
                </div>
                <div class="lindent0b">
                    <i>Clicked</i>: behavior that triggers reset button.
                </div>
                <div class="lindent0b">
                    <i>Reseting</i>: behavior that initializes game, this
                    create some new initial balls for game.
                </div>
                <div class="lindent0b">
                    <i>Removed</i>: behavior that removes balls (so do scores
                    behavior include this behavior).
                </div>
                <div class="lindent0b">
                    <i>Displayed</i>: behavior that updates current player's
                    total scores to score board.
                </div>
                <div class="lindent0b">
                    <i>Wins a price</i>: a state of game indicates that player
                    wins a price which means that he/she could view the hidden
                    content then. (This is a verb indicates that player have
                    been commited win price action, it is also a state of the
                    game).
                </div>
                <div class="lindent0b">
                    <i>Show</i>: behavior of "another system"
                    (<i>Content owner</i>) does decode the
                    hidden content and show it to player.
                </div>
            </div>
            <div class="lindent0a">
                <div>
                    Adjectives:
                </div>
                <div class="lindent0b">
                    <i>Colour</i>: attribute of the ball.
                </div>
                <div class="lindent0b">
                    <i>Empty</i>: attribute or state of the board.
                </div>
            </div>
        </div>
        <div ID=" II.3. Develope keywords into domain terms" class="lindent00">
            <div class="para_sep0">
                Keywords developing for domain model:
            </div>
            <div class="lindent0a">
                <div>
                    Terms (nouns):
                </div>
                <div class="lindent0b">
                    <i>Lines 98</i>:
                    In domain model, this term is developed into our implemented
                    system. It creates a system boundary between actors outside
                    the system which could interact with system inner objects
                    to fulfill their intent or need.
                </div>
                <div class="lindent0b">
                    <i>The game</i>:
                    developed into an object of class <i>Game Application</i>
                    in domain model. This object has responsibility to make
                    decsision following game logic.
                </div>
                <div class="lindent0b">
                    <i>Balls</i>:
                    Game objects of boundary category (stereotype) class named
                    <i>Ball</i>.
                </div>
                <div class="lindent0b">
                    <i>Board</i>:
                    A game object of class <i>Game Board</i> of boundary
                    category (stereotype).
                </div>
                <div class="lindent0b">
                    <i>Player</i>:
                    An actor outside the system that interacts with system for
                    playing.
                </div>
                <div class="lindent0b">
                    <i>Straight lines</i>:
                    This terms is rejected to be developed as an object in
                    domain model. It is just a concepts of game algorithm.
                </div>
                <div class="lindent0b">
                    <i>Page</i>: HTML page outside the system boundary. Its
                    onload function will trigger the game reset event. We could
                    review this term latter and make no decision in this step
                    of analyzing.
                </div>
                <div class="lindent0b">
                    <i>Reset button</i>:
                    An object of class <i>Button</i> of boundary category
                    (stereotype), could listen to user (Player) click event and
                    notify <i>Game Application</i> object about this event as
                    game reset event.
                </div>
                <div class="lindent0b">
                    <i>Scores</i>:
                    This term is rejected to be developed as an object in
                    domain model. It is just an attribute of game logic.
                </div>
                <div class="lindent0b">
                    <i>Score board</i>:
                    An object of class <i>Score Board</i> of boundary category
                    (stereotype), could accept <i>display</i> request from
                    <i>Game Application</i> and make updated information (
                    Player's <i>total scores</i>) available to <i>Player</i>.
                    (displayed).
                </div>
                <div class="lindent0b">
                    <i>Total scores</i>:
                    This terms is rejected to be developed as an object in
                    domain model. It is just an attribute of game logic, it is
                    also information displayed on <i>Score Board</i>.
                </div>
                <div class="lindent0b">
                    <i>Preset limitation</i>:
                    This terms is rejected to be developed as an object in
                    domain model. It is just an attribute of game logic.
                </div>
                <div class="lindent0b">
                    <i>Hidden content</i>:
                    This terms is rejected to be developed as an object in
                    domain model. It is just an attribute of
                    <i>Content owner</i>.
                </div>
                <div class="lindent0b">
                    <i>Another system</i>:
                    An actor outside the system that interacts with system for
                    <i>Hidden content</i> showing. It is named as
                    <i>Content owner</i> actor class.
                </div>
            </div>
            <div class="lindent0a">
                <div>
                    Verbs:
                </div>
                <div class="lindent0b">
                    <i>Generated</i>: this behavior creates new ball. This
                    could be initially a responsibility of an object of class
                    <i>Ball Manager</i>. It is named as <i>generate</i>.
                </div>
                <div class="lindent0b">
                    <i>Balls moving</i>: this behavior is commited by
                    <i>Player</i> with intents do a play turn. It is named as
                    <i>move ball</i>.
                </div>
                <div class="lindent0b">
                    <i>Do scores</i>: this is a behavior of an object of class
                    <i>Game Application</i>. It does computation to make
                    descision about ball removing, it also compute and update
                    <i>Player</i>'s total score. It is named as <i>do score</i>.
                </div>
                <div class="lindent0b">
                    <i>Is started</i>: rejected this term from domain model
                    because of synonym.
                </div>
                <div class="lindent0b">
                    <i>Load/refresh</i>: an event of <i>Page</i>.
                </div>
                <div class="lindent0b">
                    <i>Clicked</i>: this is <i>Player</i>'s behavior with intent
                    to reset game. It is named as <i>reset game</i>.
                </div>
                <div class="lindent0b">
                    <i>Reseting</i>: this is a behavior of an object of class
                    <i>Game Application</i>. It reinitializes whole game
                    objects to restart a new game. It is named as
                    <i>reset game</i>.
                </div>
                <div class="lindent0b">
                    <i>Removed</i>: this behavior removes balls, it could be
                    a responsibility of an object of class <i>Ball Manager</i>.
                    It is named as <i>remove balls</i>.
                </div>
                <div class="lindent0b">
                    <i>Displayed</i>: this is behavior of class
                    <i>Score board</i>. It is named as <i>display</i>.
                </div>
                <div class="lindent0b">
                    <i>Wins a price</i>: this is an intent of <i>Player</i>, but
                    it is also behavior of class <i>Game Application</i>.
                    It is named as <i>onWinPrice</i> and associated to class
                    <i>Game Application</i>. For <i>Player</i>'s intent, we will
                    review this candidate use case latter.
                </div>
                <div class="lindent0b">
                    <i>Show</i>: this is a behavior of class
                    <i>Content owner</i> which is outside the system. It is
                    named as <i>show</i>.
                </div>
            </div>
            <div class="lindent0a">
                <div>
                    <i>Adjectives</i>:
                </div>
                <div class="lindent0b">
                    <i>Colour</i>: this is an attribute of class <i>Ball</i>.
                    It is named as <i>colour</i>.
                </div>
                <div class="lindent0b">
                    <i>Empty</i>: this is an attribute or state of class
                    <i>Game Board</i>. We need further analyzing to model this
                    latter.
                </div>
            </div>
        </div>
        <div ID=" II.4. Domain model" class="lindent00">
            <div class="para_sep0">
                Domain model:
            </div>
            <div class="lindent00">
                <figure id="fig_domain_model_class_diag"></figure>
            </div>
            <div class="lindent00">
                <div class="para_sep0">
                    <i>Note:</i> <i>Browser</i> is introduced into domain model
                    as an Actor instead of <i>Page</i>, because <i>Browser</i>
                    triggers onPageLoad event not <i>Page</i> which is
                    identified as term in the keywords list. <i>Page</i> just
                    listen to this event.
                </div>
            </div>
        </div>





</div>





    </div>
    <div ID=" III. Interaction analyzing" class="para0">
        <div>
            <b>III. Interaction analyzing</b>
            <input
              id="usecases_identifying$"
              class="view_switch"
              type="button"
              value="content is hidden"
              onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
              title="click to show/hide Use cases identifying content"
            />
        </div>





<div class="usecases_identifying$content_is_displayed" style="display: none;">





        <div ID=" III.1. Actors identifying" class="lindent00">
            <div>
                <b>1. Actors identifying</b>
            </div>
            <div class="lindent0a">
                <div>
                    <i>Player</i>: this actor interacts with system to fulfill
                    his/her intents:
                </div>
                <div class="lindent0b">
                    Do a play turn: use case <i>Move Ball</i>
                </div>
                <div class="lindent0b">
                    Reset game: use case <i>Reset Game</i>
                </div>
            </div>
            <div class="lindent0a">
                <i>Content owner</i>: this actor interacts with system to
                decode and show hidden content. System will send message to it
                to fulfill this action in the case of <i>Player</i> wins a
                price.
            </div>
            <div class="lindent0a">
                <i>Browser</i>: this actor houses <i>Lines 98</i> application.
                For technical view, it interacts with application for events
                and acts as a platform. For domain view (problem view), it
                interacts with system for <i>Reset Game</i> purpose. We skip
                the technical view for SRS documents.
            </div>
        </div>
        <div ID=" III.2. Use cases identifying" class="lindent00">
            <div>
                <b>2. Use cases identifying</b>
            </div>
            <div>
                <div class="lindent0a">
                    <div>
                        <i>Player</i>
                    </div>
                    <div class="lindent0b">
                        <i>Reset Game</i>
                    </div>
                    <div class="lindent0b">
                        <div>
                            <i>Move Ball</i>
                        </div>
                        <div class="lindent0c">
                            �Extend� <i>Notify Gameover</i>
                        </div>
                        <div class="lindent0c">
                            �Extend� <i>Notify win price</i>
                        </div>
                    </div>
                    <div class="lindent0b">
                        <i>View Score</i>: <i>Score Board</i> process
                        <i>display</i> request from <i>Game Application</i> and make
                        this information available to <i>Player</i>. <i>Player</i>  
                        could view this information at anytime that he/she needs
                        to.
                    </div>
                </div>
                <div class="lindent0a">
                    <div>
                      <i>Content Owner</i>
                    </div>
                    <div class="lindent0c">
                        <i>Notify win price</i> (which is extended from
                        <i>Move Ball</i>)
                    </div>
                </div>
                <div class="lindent0a">
                    <div>
                        <i>Browser</i>
                    </div>
                    <div class="lindent0b">
                        <i>Reset Game</i>
                    </div>
                </div>
            </div>
        </div>
        <div ID=" III.3. Use cases analyzing" class="lindent00">
            <div>
                <b>3. Use cases analyzing</b>
            </div>
            <div id="uc_identifying_content" class="lindent00">
                <div>
                    <i>Player</i>
                </div>
                <div ID=" III.3 [Reset Game]" class="lindent0a">
                    <div><i>Reset Game</i></div>
                    <div class="lindent00">
                        <div><i>Happy path flow:</i></div>
                        <div class="lindent00">
                            1. Player clicks reset button.
                        </div>
                        <div class="lindent00">
                            2. Reset button sends reset event to game
                            application.
                        </div>
                        <div class="lindent00">
                            3. Game application renders initial game board.
                        </div>
                        <div class="lindent00">
                            <div>
                                4. Game application generates three
                                initial balls:
                            </div>
                            <div class="lindent0b">
                                Game application creates new three balls with
                                random colour and cell position.
                            </div>
                            <div class="lindent0b">
                                Game application renders this generating animation.
                            </div>
                        </div>
                        <div class="lindent00">
                            5. Game application waits player for a ball move.
                        </div>
                    </div>
                </div>
                <div ID=" III.3 [Move Ball]" class="lindent0a">
                    <div><i>Move Ball</i></div>
                    <div class="lindent00">
                        <div>
                            To make a move ball, player needs to make two steps:
                        </div>
                        <div class="lindent00">
                            1. Select a ball.
                        </div>
                        <div class="lindent00">
                            2. Select an empty cell to move to.
                        </div>
                    </div>
                    <div class="lindent00">
                        <div>
                            <i>Happy path flow</i> (after moving, game
                            application waits for a new ball move):
                        </div>
                        <div class="lindent00">
                            1. Player clicks a ball.
                        </div>
                        <div class="lindent00">
                            2. Game application renders focused animation for
                            target ball.
                        </div>
                        <div class="lindent00">
                            3. Game application waits player for a destination
                            cell request.
                        </div>
                        <div class="lindent00">
                            4. Player clicks an empty cell.
                        </div>
                        <div class="lindent00">
                            5. Game application renders ball moving animation.
                        </div>
                        <div class="lindent00">
                            6. Game application generates three new balls and
                            renders this generating animation.
                        </div>
                        <div class="lindent00">
                            7. Game application waits player for a new ball
                            move.
                        </div>
                    </div>
                    <div class="lindent00">
                        <div>
                            <i>Alternative flow 1</i> (after moving, game is
                            over): At step #5 of happy path, the game is over.
                            Process is continued as below steps:
                        </div>
                        <div class="lindent00">
                            A1.1. Alert message "Game Over" as an HTML5 alert.
                        </div>
                        <div class="lindent00">
                            A1.2. Game application puts
                            system into Game Over state
                            which prevents player make any futher ball moving.
                        </div>
                    </div>
                    <div class="lindent00">
                        <div>
                            <i>Alternative flow 2</i> (after moving, some balls
                            is removed): At step #5 of happy path, some balls is
                            removed following game logic. Process is continued
                            as below steps:
                        </div>
                        <div class="lindent00">
                            A2.1. Game application removes scored balls and
                            renders this removing animation.
                        </div>
                        <div class="lindent00">
                            A2.2. Game application renderes updated total scores
                            to score board.
                        </div>
                        <div class="lindent00">
                            Process is continued at happy path flow's step #7.
                        </div>
                    </div>
                    <div class="lindent00">
                        <div>
                            <i>Alternative flow 3</i> (balls generating results
                            in some score is done): At step #6 of happy path
                            flow, there are five or more balls of the
                            same colour consecutively in straight lines.
                            Process is continued as below steps: 
                        </div>
                        <div class="lindent00">
                            A3.1. Game application removes scored balls and
                            renders this removing animation.
                        </div>
                        <div class="lindent00">
                            A3.2. Game application renderes updated total scores
                            to score board.
                        </div>
                        <div class="lindent00">
                            Process is continued at happy path flow's step #7.
                        </div>
                    </div>
                    <div class="lindent00">
                        <div>
                            <i>Alternative flow 4</i> (Game board is empty):
                            At step #A6.2. of alternative flow 3, game board is
                            empty. Process is continued as below steps:
                        </div>
                        <div class="lindent00">
                            A4.1. Alert message "You won price" as an
                            HTML5 alert.
                        </div>
                        <div class="lindent00">
                            A4.2. Game application puts system into win price
                            state which prevents player make any futher ball
                            moving.
                        </div>
                        <div class="lindent00">
                            A4.3. Game application sends notify to
                            content onwer about this event.
                        </div>
                    </div>
                    <div class="lindent00">
                        <div>
                            <i>Alternative flow 5</i> (total score excesses
                            <i>preset limitation</i>): After finishing
                            alternative flow 2 or alternative flow 3 and before
                            switching back to step #7 of happy path, total score
                            excesses <i>preset limitation</i> score. Process is
                            continued as below steps:
                        </div>
                        <div class="lindent00">
                            A5.1. Alert message "You won price" as an
                            HTML5 alert.
                        </div>
                        <div class="lindent00">
                            A5.2. Game application puts system into
                            win price state which prevents player make
                            any futher ball moving.
                        </div>
                        <div class="lindent00">
                            A5.3. Game application sends notify to
                            content onwer about this event.
                        </div>
                    </div>
                    <div class="lindent00">
                        <div>
                            <i>Alternative flow 6</i> (player switchs target
                            ball). At step #4 of happy path flow, Player clicks
                            a ball instead of click an empty cell. Process is
                            continued as below steps:
                        </div>
                        <div class="lindent00">
                            A6.1. Game application renders previous focused
                            ball as normal ball (no animation).
                        </div>
                        <div class="lindent00">
                            Process is continued at happy path flow's step #2
                            with focused ball is the switched ball one.
                        </div>
                    </div>
                    <div class="lindent00">
                        <div>
                            <i>Exception flow 1</i> (There is no path to move
                            ball to target destination cell): At step #4 of
                            happy path flow, player click a target destination
                            cell that there is no path to move to. Process is
                            continued as below:
                        </div>
                        <div class="lindent00">
                            Process is continued at happy path flow's step #4.
                            (This means that such wrong logic click is ignored.)
                        </div>
                    </div>
                </div>
                <div ID=" III.3 [View Score]" class="lindent0a">
                    <div><i>View Score</i></div>
                    <div class="lindent00">
                        <div>
                            <i>Happy path flow</i>:
                        </div>
                        <div class="lindent00">
                            1. Player view <i>Score Board</i>.
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div ID=" III.4. System state analyzing" class="lindent00">
            <div>
                <b>4. System state analyzing</b>
            </div>
            <div class="lindent00">
                Most games are stateful system, and this system is stateful
                too. We could analyze use cases to enumerate system states
                from user perspectives.
            </div>
            <div class="lindent00">
                <div><i>4.1 State identifying</i></div>
                <div>
                    Analyze <i>use cases analyzing</i> output draft,
                    enumerates system states that are perceived from user
                    perspective, it is noted that animation demonstration
                    duration is also a state. This results in below
                    high-lighted draft. (<i>Note</i>: mouse over the
                    high-lighted text for state developing details tooltip.)
                    <input
                      id="state_identifying_draft_41$"
                      class="view_switch"
                      type="button"
                      value="content is hidden"
                      onclick="switchDisplay(this, ['content is displayed', 'content is hidden']);"
                      title="click to show/hide high-lighted draft content"
                    />
                </div>
                <div class="lindent00">





<div class="state_identifying_draft_41$content_is_displayed" style="display: none;">





                    <div class="para_sep1">
                        <div
                            class="para_box0"
                            id="highlighted_uc_identifying_content"
                        >
                        </div>
                    </div>





</div>





                </div>
                <div>
                    <div>
                        We have following states:
                    </div>
                    <div class="lindent0a">
                        <i>Ball Generating</i>
                    </div>
                    <div class="lindent0a">
                        <i>Move Waiting</i>
                    </div>
                    <div class="lindent0a">
                        <i>Focused</i>
                    </div>
                    <div class="lindent0a">
                        <i>Ball Moving</i>
                    </div>
                    <div class="lindent0a">
                        <i>Ball Scoring</i>
                    </div>
                    <div class="lindent0a">
                        <i>Game Over</i>
                    </div>
                    <div class="lindent0a">
                        <i>Win Price</i>
                    </div>
                </div>
            </div>
            <div class="lindent00">
                <div class="para_sep1"><i>4.2 State machine diagram</i></div>
                <div>
                    <figure id="fig_state_machine_state_machine_diag"></figure>
                </div>
            </div>
        </div>





</div>





    </div>
    <div ID=" IV. SRS � Software requirements specification" class="para0">
        <div>
            <b>IV. SRS � Software requirements specification</b>
            <input
              id="srs_doc$"
              class="view_switch"
              type="button"
              value="content is hidden"
              onclick="switchDisplay(this, ['content is hidden', 'content is show']);"
              title="click to show/hide SRS document"
            />
        </div>





<div class="srs_doc$content_is_show" style="display: none;">





        <div ID=" 1. Introduction" class="lindent00">
            <div>
                <div class="para_sep1">
                    <b>1. Introduction</b>
                </div>
            </div>
            <div id="srsnarrative">
            </div>
        </div>
        <div ID=" 2. Overall Description" class="lindent00">
            <div>
                <div class="para_sep1">
                    <b>2. Overall Description</b>
                </div>
            </div>
            <div ID=" 2.1. Product Perspective">
                <div>
                    <b>2.1. Product Perspective</b>
                </div>
                <div class="lindent00">
                    Line 98 supports Player to make a ball move, records and
                    displays Player's core. It lets Player reset the game to
                    create a new game, notify Player if the game is over or
                    notify Content Owner system if Player total scores exceeds a
                    limit to win a price.
                </div>
                <div class="lindent00">
                    <div>
                        The domain model class diagram of system is as below:
                    </div>
                    <div
                      style="position: relative; left: -40px; width: 800px;"
                      class="para_sep0"
                    >
                        <img
                          border="0"
                          data-original-height="521"
                          data-original-width="794"
                          src="https://1.bp.blogspot.com/-LMoN3Yz66OE/XozMoGX0imI/AAAAAAAAAOc/JEmp2DGokDg46CzcONvKT0mBS2ZpMmD7gCNcBGAsYHQ/s1600/Domain_View.png"
                        />
                    </div>
                </div>
            </div>
            <div ID=" 2.2. Product Functions">
                <div>
                    <b>2.2. Product Functions</b>
                </div>
                <div
                  style="position: relative; left: 10px; width: 800px;"
                  class="para_sep0"
                >
                    <img
                      border="0"
                      data-original-height="505"
                      data-original-width="739"
                      src="https://1.bp.blogspot.com/-Zog5L_YDhOU/XozSMUU2R8I/AAAAAAAAAOo/8qeV9fnF-qsRA31LJJ4Q-V39KM9DioZAQCNcBGAsYHQ/s1600/Use_Cases.png"
                    />
                </div>
                <div class="lindent0a">
                    <i>Player</i>: interacts with system to play game.
                </div>
                <div class="lindent0a">
                    <i>Content Owner</i>: interacts with system to be notified about
                    <i>Player</i>'s Win Price event.
                </div>
            </div>
            <div ID=" 2.3. User Classes and Characteristics">
                <div>
                    <b>2.3. User Classes and Characteristics</b>
                </div>
                <div class="lindent0a">
                    <i>Player</i>: Player should know how to play Line 98 game.
                    There is no game tutorial for this application.
                </div>
            </div>
            <div ID=" 2.4. Operating Environment">
                <div>
                    <b>2.4. Operating Environment</b>
                </div>
                <div class="lindent0a">
                    HTML5 supported browser.
                </div>
            </div>
            <div ID=" 2.5. Design and Implementation Constraints">
                <div>
                    <b>2.5. Design and Implementation Constraints</b>
                </div>
                <div class="lindent0a">
                    <i>For deployment</i>: application must be deployable on
                    Blogger which mean that: Javascript and css must be
                    embedded in single HTML file. They could not be hosted.
                </div>
                <div class="lindent0a">
                    <i>Ofucating</i>: source code must be offucated to prevent
                    cheating.
                </div>
                <div class="lindent0a">
                    <i>Source code size</i>: is reasonble which means that it could
                    be deployed on Blogger and loaded with a normal performance.
                </div>
                <div class="lindent0a">
                    <div>
                        <i>Configuration setting</i>: these parameters should be
                        configured as Javascript hard-coded constants which then be
                        offucated while deploying:
                    </div>
                    <div class="lindent0b">
                        <i>Win price score</i>: score that Player must reach to
                        to win a price (show hidden content).
                    </div>
                    <div class="lindent0b">
                        <i>Game board dimension</i>: game board dimension in cell
                        count unit.
                    </div>
                    <div class="lindent0b">
                        <i>Ball generating count</i>: number of balls will be
                        generated for each game turn that have no score is done.
                    </div>
                    <div class="lindent0b">
                        <i>Min balls to score</i>: minimum number of balls of the
                        same colour consecutively in straight lines to be removed
                        and do scores.
                    </div>
                    <div class="lindent0b">
                        <i>Colour list</i>: a list of 7 colour values to paint
                        balls. List has fixed size of 7 and colour is represented
                        as css colour string (example: "#00ccff")
                    </div>
                    <div class="lindent0b">
                        <i>Animation speed</i>: a ratio of real number to adjust
                        all animation speeds: ball moving, ball generating, ball
                        removing...
                    </div>
                </div>
            </div>
            <div ID=" 2.6. User Documentation">
                <div>
                    <b>2.6. User Documentation</b>
                </div>
                <div class="lindent00">
                    none
                </div>
            </div>
            <div ID=" 2.7. Assumptions and Dependencies">
                <div>
                    <b>2.7. Assumptions and Dependencies</b>
                </div>
                <div class="lindent00">
                    It is assumed that React is selected as development framework.
                    This could be changed and reviewed if React could not solved
                    the problem.
                </div>
            </div>
        </div>
        <div ID=" 3. External Interface Requirements" class="lindent00">
            <div class="para_sep1">
                <b>3. External Interface Requirements</b>
            </div>
            <div ID=" 3.1. User Interfaces">
                <div>
                    <b>3.1. User Interfaces</b>
                </div>
            </div>
            <div ID=" 3.2. Hardware Interfaces">
                <div>
                    <b>3.2. Hardware Interfaces</b>
                </div>
            </div>
            <div ID=" 3.3. Software Interfaces">
                <div>
                    <b>3.3. Software Interfaces</b>
                </div>
            </div>
            <div ID=" 3.4. Communications Interfaces">
                <div>
                    <b>3.4. Communications Interfaces</b>
                </div>
            </div>
        </div>
        <div ID=" 4. System Features" class="lindent00">
            <div class="para_sep1">
                <b>4. System Features</b>
            </div>
            <div ID=" 4.1. Player">
                <div>
                    <b>4.1. Player</b>
                </div>
                <div class="lindent00">
                    <div><b>4.1.1. Reset Game</b></div>
                    <div class="lindent00">
                        <img
                          border="0"
                          data-original-height="224"
                          data-original-width="451"
                          src="https://1.bp.blogspot.com/-sy7fsQttfNw/XpB6gl5SffI/AAAAAAAAAPA/jOBknSPG7FwhXwYREv6bMyA0nx1-5_GowCNcBGAsYHQ/s1600/Reset_UC.png"
                        />
                    </div>
                </div>
                <div id="4_1_1_reset_game_uc" class="lindent00">
                </div>
                <div class="lindent00">
                    <b>4.1.2. Move Ball</b>
                </div>
                <div class="lindent00">
                    <b>4.1.3. View Score</b>
                </div>
            </div>
            <div ID=" 4.2. Content Owner">
                <div>
                    <b>4.2. Content Owner</b>
                </div>
                <div class="lindent00">
                    <b>4.1.1. Notify Win Price</b>
                </div>
            </div>
            <div ID=" 4.3. Browser">
                <div>
                    <b>4.3. Browser</b>
                </div>
                <div class="lindent00">
                    <div>
                        <b>4.1.1. Reset Game</b>
                    </div>
                </div>
            </div>
        </div>            
        <div ID=" 5. Other Nonfunctional Requirements" class="lindent00">
            <div class="para_sep1">
                <b>5. Other Nonfunctional Requirements</b>
            </div>
            <div ID=" 5.1. Performance Requirements">
                <div>
                    <b>5.1. Performance Requirements</b>
                </div>
            </div>
            <div ID=" 5.2. Safety Requirements">
                <div>
                    <b>5.2. Safety Requirements</b>
                </div>
            </div>
            <div ID=" 5.3. Security Requirements">
                <div>
                    <b>5.3. Security Requirements</b>
                </div>
            </div>
            <div ID=" 5.4. Software Quality Attributes">
                <div>
                    <b>5.4. Software Quality Attributes</b>
                </div>
            </div>
            <div ID=" 5.5. Business Rules">
                <div>
                    <b>5.5. Business Rules</b>
                </div>
            </div>
        </div>





</div>





    </div>
    <div ID=" V. SDD � Software design description" class="para0">
        <div>
            <b>V. SDD � Software design description</b>
            <input
              id="sdd_doc$"
              class="view_switch"
              type="button"
              value="content is hidden"
              onclick="switchDisplay(this, ['content is hidden', 'content is show']);"
              title="click to show/hide SDD document"
            />
        </div>





<div class="sdd_doc$content_is_show" style="display: none;">





    <div ID=" V. SDD � Software design description" class="para0">
        <div ID=" V.1. Introduction" class="lindent00">
            <div>
                <b>1. Introduction</b>
            </div>
            <div class="lindent00">
                <div><i>1.1. Purpose</i></div>
                <div>
                    This document sketchs developed application in a generic
                    view so that developers could follow up this to develop Line
                    98 game.
                </div>
            </div>
            <div class="lindent00">
                <div><i>1.2. Scope</i></div>
                <div class="lindent0a">
                    Goal: implement Line 98 game as SRS document.
                </div>
                <div class="lindent0a">
                    Description and scope: please consult SRS document.
                </div>
                <div class="lindent0a">
                    Benefit, brief description of product: please consult SRS
                    document.
                </div>
            </div>
            <div class="lindent00">
                <div><i>1.3. Overview</i></div>
                <div class="lindent00">
                    <del>Provide an overview of this document and its organization.</del>
                </div>
            </div>
            <div class="lindent00">
                <div><i>1.4. Reference material</i></div>
                <div class="lindent0a">
                    SRS � Software requirements specification
                </div>
            </div>
            <div class="lindent00">
                <div><i>1.5. Definitions and acronyms</i></div>
                <div class="lindent00">
                    <div>
                        <del>Items are most likely not known to the audience.</del>
                    </div>
                </div>
            </div>
        </div>
        <div ID=" V.2. System overview" class="lindent00">
            <div>
                <b>2. System overview</b>
            </div>
            <div class="lindent00">
                Overview, Line 98 is an interactive game application. It
                accepts user input about reset command request, move a ball
                request to make decision following Line 98 game logic and feeds
                back user about his/her current score, game balls and its
                animation represents: ball generating, ball moving and ball
                being removed. It also notifies the Content Owner system to
                decode the hidden content, show them to user in the case of
                user win a price with his/her total scores exceeds the price
                score limitation or notifies user that the game is over in the
                case of game is over.
            </div>
            <div
              style="position: relative; left: 10px; width: 800px;"
              class="para_sep1"
            >
                <img
                  border="0"
                  data-original-height="505"
                  data-original-width="739"
                  src="https://1.bp.blogspot.com/-Zog5L_YDhOU/XozSMUU2R8I/AAAAAAAAAOo/8qeV9fnF-qsRA31LJJ4Q-V39KM9DioZAQCNcBGAsYHQ/s1600/Use_Cases.png"
                />
            </div>
        </div>
        <div ID=" V.3. System architecture" class="lindent00">
            <div>
                <b>3. System architecture</b>
            </div>
            <div ID=" V.3.1. Architectural design" class="lindent00">
                <div><i>3.1. Architectural design</i></div>
                <div class="lindent00">
                    <div
                      style="position: relative; left: -40px; width: 800px; text-align: center;"
                      class="para_sep0"
                    >
                        <img
                          border="0"
                          data-original-height="530"
                          data-original-width="381"
                          src="https://1.bp.blogspot.com/-dmD6_S6PWAE/XpHeN1TdHHI/AAAAAAAAAPM/ltGvWm3VPckSMs7n1qndD3S_vpHTRE8VACNcBGAsYHQ/s1600/Architecture.png"
                        />
                    </div>
                </div>
            </div>
            <div ID=" V.3.2. Decomposition description" class="lindent00">
                <div><i>3.2. Decomposition description</i></div>
                <div class="lindent00">
                    <div><i>Static structure</i></div>
                    <div class="lindent00">
                        <figure id="fig_designed_class_diag"></figure>
                    </div>
                </div>
                <div class="lindent00">
                    <div><i>Use case realizations</i></div>
                    <div class="lindent00">
                        <div><i>Player</i></div>
                        <div class="lindent00">
                            <div><i>Reset Game</i></div>
                            <figure id="fig_reset_game_seq_diag"></figure>
                        </div>
                        <div class="lindent00">
                            <div><i>Move Ball</i></div>
                            <div id="reset_game__"></div>
                        </div>
                        <div class="lindent00">
                            <div><i>View Score</i></div>
                        </div>
                    </div>
                </div>
            </div>
            <div ID=" V.3.3. Design rationale" class="lindent00">
                <div><i>3.3. Design rationale</i></div>
                <div ID=" V.3.3.1. For selecting the architecture">
                    <i>3.3.1. For selecting the architecture</i>
                </div>
                <div ID=" V.3.3.2. For critical issues and trade/offs clarification" class="para_sep1">
                    <div>
                        <i>3.3.2. For critical issues and trade/offs clarification</i>:
                    </div>
                    <div ID=" V.3.3.2.1 CSS animation or javascript animation">
                        <div>
                            <i>3.3.2.1 CSS animation or javascript animation</i>:
                        </div>
                        CSS animation is selected as implemented solution since
                        CSS animation offers better performance due to
                        its browser native nature as
                        <a
                          target="_blank"
                          rel="noopener noreferrer"
                          href="https://stackoverflow.com/questions/10984771/whats-faster-css3-transitions-or-jquery-animations/10984850#10984850"
                        >
                          link.
                        </a>
                        The system is also so simple to be implemented with
                        CSS animation as a proposed solution described in
                        section <i>5.2.1 Ball</i>.
                    </div>
                    <div ID=" V.3.3.2.2 Merge Cell responsibility into Ball class responsibility">
                        <div class="para_sep0">
                            <i>3.3.2.2 Merge Cell responsibility into Ball class responsibilities</i>:
                        </div>
                        <div>
                            Basing on <i>Ball moving animation displaying</i>
                            solution introduced in section <i>5.2.1 Ball</i>,
                            it is a good practice to fill all cells of
                            <i>GameBoard</i> with <i>Ball</i>s to avoid div tag
                            insert or removal dynamically for good performance.
                            To display a none <i>Ball</i> occupied <i>Cell</i>,
                            <i>Ball</i> is rendered in transparent colour.
                            Because all cells of <i>GameBoard</i> are filled
                            with <i>Ball</i>s we could merge <i>onClick</i>
                            event handler responsibility of <i>Cell</i> into
                            <i>Ball</i> class responsibilities for simplicity.
                            This violates <i>Single-responsiblity</i> principle
                            of S.O.L.I.D, but we do not need to care about
                            <i>BallManager</i> implementation in details
                            (KISS principle). This does not break the system
                            architecture because <i>BallManager</i> interface
                            is designed for <i>Liskov substitution</i>
                            principle implementation.
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div ID=" V.4. Data design" class="lindent00">
            <div>
                <b>4. Data design</b>
            </div>
            <div ID=" V.4.1. Data description" class="lindent00">
                <div><i>4.1. Data description</i></div>
                <div ID=" V.4.1.1. Data design" class="lindent00">
                    <div><i>4.1.1. Data design</i></div>
                    <div class="lindent0a">
                        <div>
                            <i>Ball id</i>: each ball has an id to identify
                            itself, primary key of <i>Ball</i> could be the
                            tupe (<i>row index</i>, <i>column index</i>)
                            where <i>row index</i>, <i>column index</i>
                            denote <i>Ball</i> location in the
                            <i>GameBoard</i> grid. We encode the tupe into
                            one integer value id as below formular:
                        </div>
                        <div class="lindent00">
                            <i>id</i> =
                            <i>row index</i> * <i>dimension</i> +
                            <i>column index</i>
                        </div>
                        <div>
                            Where:
                        </div>
                        <div class="lindent00">
                            <i>dimension</i>: as defined in section
                            <i>4.2. Data dictionary</i>
                        </div>
                    </div>
                    <div class="lindent0a">
                        <del>How the information domain of your system is transformed
                        into data structures</del>
                    </div>
                </div>
                <div class="lindent0a">
                    <del>How the major data or system entities are stored, processed
                    and organized.</del>
                </div>
                <div class="lindent0a">
                    <div><del>List any databases or data storage items</del></div>
                </div>
            </div>
            <div ID=" V.4.2. Data dictionary" class="lindent00">
                <div><i>4.2. Data dictionary</i></div>
                <div class="lindent0a">
                    <i>Dimension</i>: <i>GameBoard</i>'s dimension in
                    cells count. This is the row count or column count of the
                    <i>GameBoard</i> cells. Because the <i>GameBoard</i> is
                    square, these two values are same.
                </div>
                <div class="lindent0a">
                    <i>Cell</i>: room to put a ball into <i>GameBoard</i>.
                    This room is defined by <i>GameBoard</i>'s grid.
                </div>
                <div class="lindent0a">
                    <i>Empty cell</i>: cell that has no ball opcupied.
                </div>
                <div class="lindent0a">
                    <i>Move path</i>: an ordered list of cells that a ball
                    will travel on for a <i>Move Ball</i>. The first cell
                    of the list is the ball location itself, all the remain
                    cells of list must be <i>empty cell</i>s. The final cell
                    of the list is the target destination cell to move ball
                    to. The ball will be displayed to demonstrate its moving
                    by being disappeared at <i>cell[i]</i> and being and
                    appeared at <i>cell[i + 1]</i> where <i>cell[i]</i> is
                    the <i>i</i><sup>th</sup> item of the list.
                </div>
                <div>
                    <del>Alphabetically list the system entities or major data along
                    with their types and descriptions. If you provided a
                    functional description  in  Section 3.2, list all the
                    functions and function parameters. If you provided an OO
                    description, list the objects and its attributes, methods
                    and method parameters.</del>
                </div>
            </div>
        </div>
        <div ID=" V.5. Component design" class="lindent00">
            <div>
                <b>5. Component design</b>
            </div>
            <div ID=" TEMPLATE Component design " class="lindent00">
                <del>In this section, we take a closer look at what each
                component does in a more systematic way. If you gave
                a functional description in section 3.2, provide a summary
                of your algorithm for each function listed in 3.2 in procedural
                description language (PDL) or pseudocode. If you gave an OO
                description, summarize each object member function for all the
                objects listed in 3.2 in PDL or pseudocode. Describe any local
                data when necessary.</del>
            </div>
            <div ID=" V.5.1. Implementation class diagram" class="lindent00">
                <div><i>5.1. Implementation class diagram</i></div>
                <div>
                    Analyze sequence diagrams to allocate methods (behaviors)
                    into identifed classes of
                    <i>System overview class diagram</i> (Figure 3.3.2.1)
                </div>
                <div id="designclasses_png"></div>
                <div>
                    <div class="para_sep1">
                        New introduced classes or interfaces:
                    </div>
                    <div class="lindent0a">
                            <i>Ball</i>: this class co-operates with
                            <i>BallManager</i> interface to fulfill ball
                            interacts with actor <i>Player</i> responsibility.
                    </div>
                </div>
            </div>
            <div ID=" V.5.2. Classes design" class="lindent00">
                <div class="para_sep1">
                    <i>5.2. Classes design</i>
                </div>
                <div ID=" V.5.2.1. Ball">
                    <div><i>5.2.1. Ball</i></div>
                    <div ID=" Ball states">
                        <div>
                            This class co-operates with
                            <i>BallManager</i> interface (class
                            <i>GameBoard</i>) to fulfill ball interacts with
                            actor <i>Player</i> responsibility. Analyzing
                            it's behaviors taken part in uses cases, we
                            could enumerate it's states:
                        </div>
                        <div class="lindent0b">
                            <i>OperatingDone</i>: normal state while system is
                            in <i>Move Waiting</i> state.
                        </div>
                        <div class="lindent0b">
                            <i>Focused</i>: ball is normally clicked by
                            <i>Player</i>
                            (while system state is <i>Focused</i> and this ball
                            is the target focused one).
                        </div>
                        <div class="lindent0b">
                            <i>Moving</i>: ball is demonstrating moving
                            animation
                            (while system state is <i>Ball Moving</i> and this
                            ball is the target moved one).
                        </div>
                        <div class="lindent0b">
                            <i>Generating</i>: ball is demonstrating generating
                            animation
                            (while system state is <i>Ball Generating</i> and
                            this ball is the target generated one).
                        </div>
                        <div class="lindent0b">
                            <i>Removing</i>: ball is demonstrating removing
                            animation
                            (while system state is <i>Ball Scoring</i> and this
                            ball is the target removed one).
                        </div>
                        <div>
                            It is noted that, <i>Ball</i>'s states are derived
                            from system state if it is the target ball of the
                            operation's use case, otherwise, it is in
                            <i>OperatingDone</i> state.
                        </div>
                    </div>
                </div>
                <div ID=" V.5.2.2. Ball's State machine diagram">
                    <div>
                        <i>Ball</i>'s State machine diagram is as below:
                    </div>
                    <div>
                        <figure id="fig_ball_states_diag"></figure>
                    </div>
                </div>
                <div ID=" V.5.2.3. Propose solution">
                    <div class="para_sep1">
                        <div>
                            <!--  There are two interacts with actor
                            <i>Player</i>: ball displaying and cell
                            selecting. The solution is that we will fill
                            all cells with a <i>Ball</i> for both interacts
                            implementation. For cells that have no
                            <i>Ball</i> occupied logically, the rendered
                            colour for <i>Ball</i> is none (transparent).
                            Because all cells own a ball, cell
                            <i>onClick</i> event handling is taken by
                            <i>Ball</i>. For ball displaying behaviors,
                            algorithms are as below:  -->
                            Ball displaying algorithms are as below:
                        </div>
                        <div ID=" Normal displaying" class="lindent0a">
                            <div>
                                <i>Normal displaying</i> (no animation):
                                normal css without animation.
                            </div>
                        </div>
                        <div ID=" Focused animation displaying" class="lindent0a">
                            <div>
                                <i>Focused animation displaying</i>:
                                <i>ballFocused</i> css with animation that
                                change margin-bottom of <i>Ball</i>'s div tag:
                            </div>
                            <div class="lindent0b">
                                <i>Animation properties</i>:
                                <i>infinite</i>, <i>alternate</i>
                            </div>
                            <div class="lindent0b">
                                <div><i>Keyframes</i>:</div>
                                <div class="lindent00">





<textarea id="jsxsrc:5.2.3:1" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
@keyframes ballFocused {
  from {}
  to {margin-bottom: 15px}
}</textarea>





                                </div>
                            </div>
                        </div>
                        <div ID=" Ball generating animation displaying" class="lindent0a">
                            <div>
                                <i>Ball generating animation displaying</i>:
                                <i>ballGenerating</i> css with animation that
                                change width, height of <i>Ball</i>'s div tag.
                            </div>
                            <div class="lindent0b">
                                <div><i>Design</i>:</div>
                                <div class="lindent0c">
                                    <i>Ball</i>'s div tag width, height
                                    increases from 0 to its own values.
                                </div>
                                <div class="lindent0c">
                                    <i>Ball</i>'s div tag background is
                                    fixed with desired colour. This helps
                                    a transparent or null <i>Ball</i>
                                    could taken part in animation without
                                    changing its current colour state.
                                    Colour state, then, could be updated
                                    latter, this results in animation colour
                                    is independent from <i>Ball</i> colour
                                    state. We need this characteristic to
                                    implement
                                    <i>Ball moving animation displaying</i>,
                                    and we add this to support css sharing
                                    or reused with
                                    <i>Ball moving animation displaying</i>.
                                </div>
                            </div>
                            <div class="lindent0b">
                                <div>
                                    <i>Animation properties</i>: <i>normal</i>
                                </div>
                            </div>
                            <div class="lindent0b">
                                <div><i>Keyframes</i>:</div>
                                <div class="lindent00">


<textarea id="jsxsrc:5.2.3:2" rows="10" cols="80"  class="txt_sourcecodefont0" readonly="true" style="display: none;">
@keyframes ballGenerating1 {
  from {
    background: #00ccff;
    width: 0px;
    height: 0px;
  }
  to {
    background: #00ccff;
  }
}

.....

@keyframes ballGenerating7 {
  .....
}</textarea>


                                </div>
                            </div>
                        </div>
                        <div ID=" Ball removing animation displaying" class="lindent0a">
                            <div>
                                <i>Ball removing animation displaying</i>
                            </div>
                            <div class="lindent0b">
                                <i>Design</i>:
                                <i>Ball</i>'s div tag width, height
                                decrease to 0 from its own values.
                                This could be archived by decorating
                                <i>ballGenerating</i> with below
                                animation properties
                            </div>
                            <div class="lindent0b">
                                <div>
                                    <i>Animation properties</i>:
                                    <i>reverse</i>, <i>forwards</i> (it is
                                    noted that <i>forwards</i> is applied
                                    to keep width, height values fixed to 0
                                    after animation so that
                                    removed <i>Ball</i> is not re-displayed
                                    because of its current own colour state
                                    rendering)
                                </div>
                            </div>
                            <div class="lindent0b">
                                <div><i>Keyframes</i>: n/a
                                (shared with <i>ballGenerating</i>)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div ID=" Ball moving animation displaying" class="lindent0a">
                        <div>
                            <i>Ball moving animation displaying</i>
                        </div>
                        <div class="lindent0b">
                            <div>
                                <i>Design</i>: due to definition in section
                                <i>4.2. Data dictionary</i> term
                                <i>Move path</i>, we need css animation that:
                            </div>
                            <div class="lindent0c">
                                <div><i>Cell animation demonstration</i>:</div>
                                <div class="lindent0c">
                                    <div>
                                        For cell not be the first or the final
                                        item of list:
                                    </div>
                                    <div class="lindent00">
                                        1. First, css animation demonstrates ball is
                                        generated.
                                    </div>
                                    <div class="lindent00">
                                        2. Then, css animation demonstrates ball is
                                        removed.
                                    </div>
                                </div>
                                <div class="lindent0c">
                                    <div>
                                        For the first cell item of list: css
                                        animation demonstrates ball is removed.
                                    </div>
                                </div>
                                <div class="lindent0c">
                                    <div>
                                        For the final cell item of list: css
                                        animation demonstrates ball is generated.
                                    </div>
                                </div>
                            </div>
                            <div class="lindent0c">
                                <div>
                                    <i>Cell animation demonstration start time</i>:
                                    we will delay start time of each cell
                                    in the list to demonstrate ball moving.
                                </div>
                                <div class="lindent00">
                                    1. Start time of first cell is not be
                                    delayed (delay time is 0s)
                                </div>
                                <div class="lindent00">
                                    2. Start time of cell
                                    <i>i</i><sup>th</sup>
                                    is <i>i</i> * <i>duration</i> (where
                                    <i>duration</i> is animation duration
                                    of a cell)
                                </div>
                            </div>
                        </div>
                        <div class="lindent0b">
                            <div>
                                <i>Animation properties</i>:
                            </div>
                            <div class="lindent0c">
                                <div>
                                    For cell not be the first or the final
                                    item of list: <i>forwards</i>,
                                    <i>alternate</i>
                                </div>
                            </div>
                            <div class="lindent0c">
                                <div>
                                    For the first cell item of list:
                                    <i>forwards</i>, <i>reverse</i>
                                </div>
                            </div>
                            <div class="lindent0c">
                                <div>
                                    For the final cell item of list:
                                    <i>forwards</i>, <i>normal</i>
                                </div>
                            </div>
                        </div>
                        <div class="lindent0b">
                            <div><i>Keyframes</i>: n/a</div>
                            (shared with <i>ballGenerating</i>)
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div ID=" V.6. Human interface design" class="lindent00">
            <div>
                <b>6. Human interface design</b>
            </div>
            <div class="lindent00">
                <div><i>6.1. Overview of user interface</i></div>
                <div class="lindent0a">
                    <div><i>Player</i></div>
                    <div class="lindent0b">
                        <div>Reset Game</div>
                    </div>
                    <div class="lindent0b">
                        <div>Move Ball</div>
                    </div>
                    <div class="lindent0b">
                        <div>View Score</div>
                    </div>
                </div>
            </div>
            <div class="lindent00">
                <div><i>6.2. Screen images</i></div>
                <div class="lindent0a">
                    <div><i>Player</i></div>
                    <div class="lindent0b">
                        <div>Reset Game</div>
                    </div>
                    <div class="lindent0b">
                        <div>Move Ball</div>
                    </div>
                    <div class="lindent0b">
                        <div>View Score</div>
                    </div>
                </div>
            </div>
            <div class="lindent00">
                <div><i>6.3. Screen objects and actions</i></div>
                <div class="lindent00">
                    @TODO: cell, ball, reset button == cell is empty ball
                </div>
            </div>
        </div>
        <div ID=" V.7. Requirements matrix" class="lindent00">
            <div>
                <div><b>7. Requirements matrix</b></div>
                <div class="lindent00">
                    <del>Provide a cross�reference that traces components and data
                    structures to the requirements in your SRS document.
                    Use  a  tabular  format to show  which system  components
                    satisfy each of the  functional requirements from the SRS.
                    Refer to the functional requirements by the numbers/codes
                    that you gave them in the SRS.</del>
                </div>
            </div>
        </div>
        <div ID=" V.8. Appendices" class="lindent00">
            <div>
                <div><b>8. Appendices</b></div>
                <div class="lindent00">
                    None
                </div>
            </div>
        </div>
    </div>





</div>





    </div>
</div>
<div id="githubsrc" class="hidden">Source: https://github.com/phamsodiep/blogger/blob/master/huyj2ee/se-iconix-use-case-driven-design-case-2019-04.htm</div>
<div id="githubver" class="hidden">0.0.4</div>
<script>doDefaultDecorate();</script>
<script>
function fillFigure(
  elemId,
  imgSrc,
  orgW,
  height,
  leftAdj,
  clippedW,
  scrollClass,
  figId,
  figCaption
) {
  let elem = document.getElementById(elemId);
  if (!(elem !== null && typeof elem.innerHTML === "string")) {
    return false;
  }
  let ww = orgW;
  let hh = height;
  let scrollDiv =
    typeof scrollClass === "string" ?
    `<div class="${scrollClass}">`:
    "<div>";
  let figCap = typeof figCaption === "string" ?
    `<i>${figCaption}</i>` : "";
  let figcaption = "";
  if (typeof figId === "string") {
    figcaption = `<figcaption><b>Figure</b> ${figId}: ${figCap}</figcaption>`;
  }
  elem.innerHTML = `
    <div style="position: relative; left: ${leftAdj}px; width: ${clippedW}px;">
        ${scrollDiv}
            <div style="width:${ww}px; height:${hh}px">
                <img
                  border="0"
                  data-original-height="${height}"
                  data-original-width="${orgW}"
                  height="${height}
                  width="${orgW}"
                  src="${imgSrc}"
                />
            </div>
        </div>
        <div style="text-align: center" class="para_sep0">${figcaption}</div>
    </div>
  `;
  return true;
}

const UC_DESC_EN = {
  id :        "ID",
  ucName:     "Use Case Name",
  desc:       "Description",
  xref:       "XRef",
  priAct:     "Primary Actor",
  secAct:     "Secondary Actor",
  incUc:      "Include use cases",
  trigger:    "Trigger",
  preCond:    "Precondition",
  postCond:   "Postconditions",
  basicPath:  "Basic Path",
  altPath:    "Alternative Paths",
  exceptPath: "Exception Paths",
  other:      "Other",
  none:       "None"
};
const UC_DESC_PATH_IDS = [10, 11, 12];
function fillUCDesc(elemId, ucDesc) {
  let elem = document.getElementById(elemId);
  if (!(elem !== null && typeof elem.innerHTML === "string")) {
    return false;
  }
  if (!Array.isArray(ucDesc)) {
    return false;
  }
  let fillPath = function(steps) {
    if (steps === null) {
      return "";
    }
    return [
      '<ol class="uc_desc_flow"><li>',
      steps.join("</li><li>"),
      '</li></ol>'
    ].join("");
  }
  let tabElem = document.createElement("TABLE");
  tabElem.className = "uc_description";
  for (let i = 0; i < ucDesc.length; i++) {
    let row = ucDesc[i];
    if (!Array.isArray(row)) {
      return false;
    }
    let rowElem = document.createElement("TR");    
    for (let j = 0; j < 2; j++) {
      let colElem = document.createElement("TD");
      if (j === 0) {
        colElem.innerHTML = "<b>" + row[j] + "</b>";
      }
      else {
        if (UC_DESC_PATH_IDS.includes(i)) {
          colElem.innerHTML = fillPath(row[j]);
        }
        else {
          colElem.innerHTML = row[j];
        }
      }
      rowElem.appendChild(colElem);
    }
    tabElem.appendChild(rowElem);
  }
  elem.appendChild(tabElem);
  return true;
}

function cloneHtmlContent(srcId, desId) {
  let srcElem = document.getElementById(srcId);
  if (srcElem !== null && typeof srcElem.innerHTML === "string") {
    let desElem = document.getElementById(desId);
    if (desElem !== null && typeof desElem.innerHTML === "string") {
      desElem.innerHTML = srcElem.innerHTML;
    }
  }
}










function doHighlight(elemId, reqs) {
  const ESPAN = "</span>";
  const CLASSES = [
    "hl_black_tor",        // 0
    "hl_azure_dra",        // 1
    "hl_vermilion_bir",    // 2
    "hl_yellow_qil",       // 3
    "hl_white_tig"         // 4
  ];

  let elem = document.getElementById(elemId);
  let chunks = [];
  let idx = 0;
  if (!(elem !== null && typeof elem.innerHTML === "string")) {
    return false;
  }
  let content = elem.innerHTML;
  for (let i = 0; i < reqs.length; i++) {
    let req = reqs[i];
    let id = content.indexOf(req[0], idx);
    if (id < 0) {
      return false;
    }
    chunks[chunks.length] = [idx, id]
    idx = id + req[0].length;
  }
  let highlightedContent = "";
  let computeTitle = function (titleStr) {
    let formatStr = function (str) {
      let shiftCode = function (str) {
        if (str.length === 0) {
          return "";
        }
        const FMT_HIGH_CH             = (0xD835);
        const FMT_BOLD_LOW_UC_CH      = (0xDE08 - 26*2);
        //const FMT_BOLD_LOW_LC_CH      = (0xDE08 - 26);
        const FMT_ITALIC_LOW_UC_CH    = (0xDE08);
        //const FMT_ITALIC_LOW_LC_CH    = (0xDE08 + 26);
        let fmt_low_uc_ch = 0;
        let result = "";
        switch(str.charAt(0)) {
          case 'b':
            fmt_low_uc_ch = FMT_BOLD_LOW_UC_CH;
          break;

          case 'i':
            fmt_low_uc_ch = FMT_ITALIC_LOW_UC_CH;
          break;

          default:
            result = str;
          break;
        }
        if (fmt_low_uc_ch > 0) {
          let fmt_low_lc_ch = fmt_low_uc_ch + 26;
          for (let i = 1; i < str.length; i++) {
            let chCode = str.charCodeAt(i);
            if (chCode >= 65 && chCode <= 90) { // upper case
              chCode -= 65;
              result = result +
                String.fromCodePoint(FMT_HIGH_CH, fmt_low_uc_ch + chCode);
            }
            else if (chCode >= 97 && chCode <= 122) {
              chCode -= 97;
              result = result +
                String.fromCodePoint(FMT_HIGH_CH, fmt_low_lc_ch + chCode);
            }
            else {
              result = result + str.charAt(i);
            }
          }
        }
        return result;
      };
      return str.length === 0 ? "" :
        str.startsWith("?") ? shiftCode(str.substring("?".length)) : str;
    }
    for(let i = 0; i < titleStr.length; i++) {
      titleStr[i] = formatStr(titleStr[i]);
    }
    return `title="${titleStr.join("")}"`;
  }
  for (let i = 0; i < chunks.length; i++) {
    highlightedContent += content.substring(chunks[i][0], chunks[i][1]);
    let clId = reqs[i][1];
    let varId = 0;
    let tmpClId = Math.floor(clId / 100);
    if (tmpClId > 0) {
      clId = tmpClId;
      varId = 2;
    }
    else {
      tmpClId = Math.floor(clId / 10);
      if (tmpClId > 0) {
        clId = tmpClId;
        varId = 1;
      }
    }
    let note = Array.isArray(reqs[i][2]) ? computeTitle(reqs[i][2]): "";
    highlightedContent +=
      `<span class="${CLASSES[clId]}${varId}" ${note}>${reqs[i][0]}</span>`;
  }
  highlightedContent += content.substring(idx, content.length);
  elem.innerHTML = highlightedContent;
  return true;
}






cloneHtmlContent("narrative_source", "srsnarrative");
cloneHtmlContent("narrative_source", "highlightednarrative");

let highlightResult = doHighlight(
  "highlightednarrative",
  [
    ["Lines 98", 40],
    ["The game", 40],
    ["balls", 40],
    ["generated", 10],
    ["board", 40],
    ["player", 40],
    ["ball moving", 10],
    ["do scores", 10],
    ["colour", 20],
    ["straight lines", 40],
    ["is started", 10],
    ["page", 40],
    ["load/refresh", 10],
    ["reset button", 40],
    ["clicked", 10],
    ["reseting", 10],
    ["scores", 40],
    ["removed", 10],
    ["displayed", 10],
    ["score board", 40],
    ["total scores", 40],
    ["preset limitation", 40],
    ["wins a price", 10],
    ["show", 10],
    ["hidden content", 40],
    // Ambitious points high lighting
    ["another system", 40],
    ["empty", 20],
  ]
);
if (!highlightResult) {
  alert('highlight error for div id #highlightednarrative');
}

cloneHtmlContent("uc_identifying_content", "highlighted_uc_identifying_content");

highlightResult = doHighlight(
  "highlighted_uc_identifying_content",
  [
    [
      "renders this generating animation", 40,
      [
        "developed to ",
        "?bBall Generating ",
        "state"
      ]
    ],
    [
      "waits player for a ball move", 40,
      [
        "developed to ",
        "?bMove Waiting ",
        "state"
      ]
    ],
    [
      "renders focused animation", 40,
      [
        "developed to ",
        "?bFocused ",
        "state"
      ]
    ],
    [
      "ball moving animation", 40,
      [
        "developed to ",
        "?bBall Moving ",
        "state"
      ]
    ],
    [
      "system into Game Over state", 40,
      [
        "developed to ",
        "?bGame Over ",
        "state"
      ]
    ],
    [
      "renders this removing animation", 40,
      [
        "developed to ",
        "?bBall Scoring ",
        "state"
      ]
    ],
    [
      "win price state", 40,
      [
        "developed to ",
        "?bWin Price ",
        "state"
      ]
    ]
  ]
);

if (!highlightResult) {
  alert('highlight error for div id #highlighted_uc_identifying_content');
}


let ucDesc = UC_DESC_EN;
let fillUC4_1_1_reset_game_uc = fillUCDesc("4_1_1_reset_game_uc", [
  [ucDesc.id, "ResetGame"],
  [ucDesc.ucName, "Reset Game"],
  [ucDesc.desc, ""],
  [ucDesc.xref, ""],
  [ucDesc.priAct, "Player"],
  [ucDesc.secAct, "None"],
  [ucDesc.incUc, "None"],
  [ucDesc.trigger, ""],
  [ucDesc.preCond, ""],
  [ucDesc.postCond, [
      "Game have been initialized with three balls generated and game is in ",
      "<i>Move Waiting</i> state."
    ].join("")
  ],
  [ucDesc.basicPath, [
      "f",
      "s",
      "m"
    ]
  ],
  [ucDesc.altPath, null
  ],
  [ucDesc.exceptPath, null],
  [ucDesc.other, null]
]);
if (!(fillUC4_1_1_reset_game_uc)) {
  alert("Failure to fill use case description 4_1_1_reset_game_uc");
}
fillFigure(
    "designclasses_png",
    [
      "https://1.bp.blogspot.com/-T1uICt-4MFg/XqR6r3MiG-I/AAAAAAAAAQE/",
      "MHwYYrn-uHkZp7izlOGslgYfAPgKOq9SQCNcBGAsYHQ/s1600/DesignClasses.png"
    ].join(""),
    678,
    789,
    -30,
    678,
    null,
    "5.1",
    "Implementation class diagram"
);
fillFigure(
    "fig_domain_model_class_diag",
    [
      "https://1.bp.blogspot.com/-B1Qmb4lbgT8/XpA9BhZhaxI/AAAAAAAAAO0/",
      "tm4QtkAKx-kuOKj7Et9d2iNnfiVuf7NGQCNcBGAsYHQ/s1600/Domain_Classes.png"
    ].join(""),
    721,
    461,
    0,
    721,
    null,
    "II",
    "Basic investigation domain model classes"
);
fillFigure(
    "fig_designed_class_diag",
    [
      "https://1.bp.blogspot.com/-vb7oIGzIqWc/XpHo1GRaQKI/AAAAAAAAAPY/",
      "qC-MH3GjV50DI_G-JQ7zQMlGFpPsulzAwCNcBGAsYHQ/s1600/DomainClasses.png"
    ].join(""),
    844,
    591,
    -150,
    850,
    null,
    "3.3.2.1",
    "System overview class diagram"
);
fillFigure(
    "fig_reset_game_seq_diag",
    [
      "https://1.bp.blogspot.com/-NZamg8UYRUg/XpHo-0yOpLI/AAAAAAAAAPc/",
      "0G_atvexKVEZzpLJmR0fl_NkB9OLmV1fACNcBGAsYHQ/s1600/ResetGame.png"
    ].join(""),
    951,
    821,
    -196,
    860,
    "hscrollable_container",
    "3.3.2.2",
    "Reset Game sequence diagram"
);
fillFigure(
    "fig_state_machine_state_machine_diag",
    [
      "https://1.bp.blogspot.com/-zUxYyIgYICk/XqR3J_O7RyI/AAAAAAAAAYU/",
      "Ccg84YnwPdIdn2jdMbnc7Hoh2xzr4ij6wCNcBGAsYHQ/s1600/",
      "StateMachineStateMachine.png"
    ].join(""),
    582,
    648,
    50,
    582,
    null,
    "4.2",
    "System state machine diagram"
);
fillFigure(
    "fig_ball_states_diag",
    [
      "https://1.bp.blogspot.com/-Zagux39eR-M/XqaI4sEEEqI/AAAAAAAAAQU/",
      "TQiZLkWYl4kOUAGPlHlkrrv_ExNAdOyaACNcBGAsYHQ/s1600/BallStates.png"
    ].join(""),
    814,
    581,
    -120,
    581,
    null,
    "5.2",
    "Ball state machine diagram"
);

</script>

<script>
doScrollIntoViewDecoration();

const DiepSrcCode = {
  FORMAT_JAVA: 0,
  FORMAT_JS: 1,

  FORMATS: [
    // FORMAT_JAVA
    [
      ["  ", "&nbsp;&nbsp;"],
      ["package", "<b style='color: olive;'>package</b>"],
      ["import", "<b style='color: olive;'>import</b>"],
      ["public", "<b style='color: green;'>public</b>"],
      ["private", "<b style='color: green;'>private</b>"],
      ["void", "<b style='color: green;'>void</b>"],
      ["for", "<b style='color: maroon;'>for</b>"],
      ["if", "<b style='color: maroon;'>if</b>"],
      ["this", "<b style='color: maroon;'>this</b>"],
      ["return", "<b style='color: maroon;'>return</b>"]
    ],
    // FORMAT_JS
    [
      ["  ", "&nbsp;&nbsp;"],
      // keywords
      ["import[ ]", "<b style='color: blue;'>import</b>&nbsp;"],
      ["export[ ]", "<b style='color: blue;'>export</b>&nbsp;"],
      ["class[ ]", "<b style='color: blue;'>class</b>&nbsp;"],
      ["extends[ ]", "<b style='color: blue;'>extends</b>&nbsp;"],
      ["super[(]", "<b style='color: blue;'>super</b>("],
      ["new[ ]", "<b style='color: blue;'>new</b>&nbsp;"],
      ["constructor[(]", "<b style='color: darkgoldenrod;'>constructor</b>("],
      ["[ ]undefined", "&nbsp;<b style='color: blueviolet;'>undefined</b>"],
      ["[ ]null", "&nbsp;<b style='color: blue;'>null</b>"],
      ["[ ]false", "&nbsp;<b style='color: blue;'>false</b>"],
      ["[ ]true", "&nbsp;<b style='color: blue;'>true</b>"],
      ["const[ ]", "<b style='color: blue;'>const</b>&nbsp;"],
      ["let[ ]", "<b style='color: blue;'>let</b>&nbsp;"],
      ["var[ ]", "<b style='color: blue;'>var</b>&nbsp;"],
      ["for[ ]", "<b style='color: blue;'>for</b>&nbsp;"],
      ["if[ ]", "<b style='color: blue;'>if</b>&nbsp;"],
      ["else[ ]", "<b style='color: blue;'>else</b>&nbsp;"],
      ["switch[(]", "<b style='color: blue;'>switch</b>("],
      ["case[ ]", "<b style='color: blue;'>case</b>&nbsp;"],
      ["break", "<b style='color: blue;'>break</b>"],
      ["default:", "<b style='color: blue;'>default</b>:"],
      ["this", "<b style='color: blue;'>this</b>"],
      ["return[ ]", "<b style='color: blue;'>return</b>&nbsp;"],
      ["typeof[ ]", "<b style='color: blue;'>typeof</b>&nbsp;"],
      ["function[ ]", "<b style='color: blue;'>function</b>&nbsp;"],

      // objects
      ["document[.]", "<b style='color: darkgoldenrod;'>document</b>."],
      ["Array", "<b style='color: blueviolet;'>Array</b>"],
      ["Math[.]", "<b style='color: blueviolet;'>Math</b>."],
      //["Object", "<b style='color: blueviolet;'>Object</b>"],
      // methods
      ["toString[(][)]", "<b style='color: blueviolet;'>toString</b>()"],
      ["setTimeout[(]", "<b style='color: darkgoldenrod;'>setTimeout</b>("],
      ["alert[(]", "<b style='color: darkgoldenrod;'>alert</b>("],
      ["Object.assign[(]",
        [
          "<b style='color: blueviolet;'>Object</b>",
          ".",
          "<b style='color: darkgoldenrod;'>assign</b>("
        ].join("")
      ],
      ["[\u262F]", ""]
    ]
  ],

  commentedOutHtmlWrap: function (s, skipBreak) {
    if (skipBreak) {
        return "<i style='color: teal;'>".concat(s, "</i>");
    }
    return "<i style='color: teal;'>".concat(s, "</i><br />");
  },

  formatLine: function (formatId, line, skipBreak) {
    let formats = DiepSrcCode.FORMATS[formatId];
    for (let j = 0; j < formats.length; j++) {
        let format = formats[j];
        let regExp = new RegExp(format[0], 'g');
        line = line.replace(regExp, format[1])
    }
    if (skipBreak) {
        return line;
    }
    return line.concat("<br />");
  },

  processCommentedOut: function (line, formatId) {
    let idx = line.indexOf("//");
    if (idx >= 0) {
        let html =
          DiepSrcCode.formatLine(formatId, line.substring(0, idx), true);
        html = html.concat(
          DiepSrcCode.commentedOutHtmlWrap(line.substring(idx, line.length))
        );
        return [true, html];
    }
    idx = line.indexOf("/*");
    if (idx >= 0) {
        let html =
          DiepSrcCode.formatLine(formatId, line.substring(0, idx), true);
        html = html.concat(
          DiepSrcCode.commentedOutHtmlWrap(line.substring(idx, line.length))
        );
        return [false, html];;
    }
    return null;
  },

  detectCommentedOutClose: function (line, formatId) {
      let idx = line.indexOf("*/");
      if (idx >= 0) {
          idx += 2;
          let html =
            DiepSrcCode.commentedOutHtmlWrap(line.substring(0, idx), true);
          html = html.concat(
            DiepSrcCode.formatLine(formatId, line.substring(idx, line.length))
          );
          return [false, html];
      }
      return [true, DiepSrcCode.commentedOutHtmlWrap(line)];
  },

  escapeJSX: function (txtId) {
    let txtComp = document.getElementById(txtId);
    if (txtComp !== null) {
      let str = txtComp.value.toString();
      let regExp = new RegExp("[<]", 'g');
      str = str.replace(regExp, "&lt;");
      regExp = new RegExp("[>]", 'g');
      str = str.replace(regExp, "&gt;");
      txtComp.value = str;
    }
  },

  fillCFamilySourceCode: function (txtId, formatId) {
    // parse and convert source code
    let html = "";
    let txtComp = document.getElementById(txtId);
    let onCommentedOut = false;
    if (txtComp) {
      let lines = txtComp.value.split(/\r?\n/);
      for (let i = 0; i < lines.length; i++) {
          let line = lines[i];
          if (onCommentedOut) {
              let detect = DiepSrcCode.detectCommentedOutClose(line, formatId);
              onCommentedOut = detect[0];
              html = html.concat(detect[1]);
              continue;
          }
          let commentedOut = DiepSrcCode.processCommentedOut(line, formatId);
          if (commentedOut == null) {
              html = html.concat(DiepSrcCode.formatLine(formatId, line));
          }
          else {
              if (commentedOut[0]) {
                  html = html.concat(commentedOut[1]);
              }
              else {
                  html = html.concat(commentedOut[1]);
                  onCommentedOut = true;
              }
          }
      }

      // apply converted source code to target div
      let divElement = document.createElement("DIV");
      divElement.innerHTML = html;
      divElement.className = "txt_sourcecodefont1";
      txtComp.parentNode.insertBefore(divElement, txtComp);
    }
  }
};

let snippets  = document.querySelectorAll('*[id^="jsxsrc:"]');
for (let i = 0; i<snippets.length; i++) {
  let id = snippets[i].id;
  DiepSrcCode.escapeJSX(id);
  DiepSrcCode.fillCFamilySourceCode(id, DiepSrcCode.FORMAT_JS);
}
</script>
</div>

